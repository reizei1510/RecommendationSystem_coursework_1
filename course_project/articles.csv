ID;Title;Text
1;Что такое искусственный интеллект?;"Огромная волна интереса, развития мифов и различных страхов по отношению к искусственному интеллекту (ИИ) поднялась достаточно давно. По мнению исследователей, общество как раз находится на гребне данной волны, ведь фантастика в старых голливудских фильмах о роботах-убийцах и киборгах начинает сбываться, вспомним хотя бы фильм «Короткое замыкание» со слоганом «Номер пять - жив!», где небольшой боевой робот на гусеничном шасси, один из пяти, подвергается удару высокого напряжения и у него просыпается некоторый интеллект, робот начинает изучать мир по-своему. Прошло всего лишь около четверти века с момента выхода фильма, но уже сейчас нет никакой фантастики в происходящем на экране. Для искусственного интеллекта существует два основных определения: наука и технология создания интеллектуальных машин, особенно интеллектуальных компьютерных программ; свойство интеллектуальных систем выполнять творческие функции, которые традиционно считаются прерогативой человека. Так вот полноценный ИИ, который смог бы решать творческие задачи, т.е. такой, который отвечал бы второму определению, еще пока не создан, и пока нет каких-либо внятных идей о том как его создать. Заставить компьютер решать творческую задачу, чрезвычайно тяжело. На данный момент он способен только обрабатывать огромные объемы информации, и решать определённые задачи в соответствии с ранее запрограммированным алгоритмом. Если же рассмотреть первое определение ИИ, то на данный момент создано уже очень много устройств, программ и машин, которые подпадают под такое определение, и в таком случае, можно сказать, что определенными плодами работ над созданием искусственного интеллекта человечество уже давно пользуется. Каждый день мы слышим о проявлении ИИ и машинного обучения как совокупности мощных инструментов для интеллектуального анализа и синтеза различной информации, включая понимание человеческого языка и распознавание образов. Ярким примером является применение искусственного интеллекта при самостоятельном вождении автомобиля без помощи человека. Одновременно со всеми положительными возможностями ИИ у нас есть некоторая каста уважаемых мыслителей говорящих, что мы должны быть чрезвычайно бдительными в росте возможностей ИИ, потому что суперумные и мыслящие машины способны развить смертоносное презрение к нам, ведущее к гибели человечества. Эти же машины, могут и от """"великой (запрограммированной) любви"""" к человечеству, решить, что они обязаны захватить власть на Земле и обеспечить мир, покой и процветание человечества. И может здоровье и сытость людей в этом случае даже и вырастет под управлением умных машин, но вряд ли, тем не менее, кому-то из людей понравится такое положение дел. Существует и убеждение людей в том, что сверхразвитие ИИ просто невозможно, ведь машины никогда не будут в состоянии думать так же, как это делают люди. Между тем, очень хорошо финансируемые компании утверждают о способности обеспечить практически любое решение ИИ для вашего бизнеса сегодня. Стоит отметить, если некоторые люди думают, что никакой системе ИИ не убить нас, то безусловно не стоит забывать, что роботы и различные системы управления будут отнимать все наши рабочие места и вскоре смогут оставить без работы большую часть человечества. И хотя ясно, что в этом случае роботы сами же и произведут достаточно товаров для всех, и минимальные потребности безработных будут удовлетворены. Тем не менее, наличие огромных масс шатающихся без дела людей, может привести к непредсказуемым и серьезным социальным конфликтам, сдвигам и проблемам. В стремлении разумных людей прорваться через информационный шум и добраться до сути, чем же является ИИ и что он может сделать полезного для нас, и действительно ли мы должны беспокоиться о том, что роботы оставят нас без работы или убьют когда-нибудь во время сна — нет ничего странного, ведь в итоге каждому хочется спокойно жить. Многие из компаний уже используют различные возможности ИИ, осталось только заставить работать данный интеллект полностью в наших интересах. Наиболее вероятным негативным вариантом развития будет теория, где за мощью ИИ сможет стать злой гений человека и под диктатом этого злого гения ИИ сможет творить зло, но конечно не сам по себе, но как следствие воли человека. Ведь само по себе зло не может быть целью суперумного """"существа"""", такое """"существо"""" никогда не начнет действовать только ради того чтобы сотворить зло как таковое. Человечество может опасаться только того, что по своей """"воле"""" ИИ попытается принудить людей вести себя так, как ему будет казаться правильным, а не так как будут хотеть вести себя люди. В поисках далёкого будущего не стоит забывать о уже некоторых решаемых ИИ каждодневных задачах... Во-первых, ИИ позволит нам уже сегодня создавать системы в которых отсутствуют предрассудки и предубеждения человека, что исключит всякую коррупцию, симпатию и антипатию и так далее. Во-вторых, ИИ предоставляет мощные функциональные возможности, которые используются уже на рабочем месте самим человеком. В-третьих, умные машины являются единственным инструментом, которым мы сможем обработать огромные количества данных, которые как снежный ком растут вокруг нас. ИИ будет иметь возможность анализировать, интерпретировать и осмысливать данные в огромных масштабах, которые не представляется возможным для обработки нашим собственным умом. Да и честно говоря, ведь людям и не интересно сидеть и сутками обрабатывать сухие цифры, нам интересно делать выводы и принимать решения, на основе правильно обработанной и поданной информации (чем и занимается сегодня ИИ).В итоге мы имеем уменьшение использования человеческих ресурсов и перекладывание оных на ИИ, что позволяет нам тратить меньше времени на рутинные работы и оставляет больше времени на осмысление себя как человека и решение творческих задач, которые пока не способен решить ни один компьютер. И речь здесь идет не только о научных и технологических задачах, но и обо всех остальных творческих задачах, которые ставят и решают люди и только люди: как красивее построить, нарисовать, станцевать, спеть, как вкуснее приготовить, как проявить больше любви к ближнему, как подарить ему больше тепла, как лучше воспитать детей и так далее. Вот над решением каких вопросов смогут люди задумываться больше, если ИИ снимет с нас решение рутинных задач, обработку сухой информации, и даже производство и доставку базовых материальных ценностей."
2;Как изучить Data Science?;"Сферы нейронных сетей, а также Data Science набирают большую популярность. В статье вы узнаете что такое Data Science и как её можно изучить. Остались ли те, кто ещё ничего не знает о «big data»? Наверное, такого человека уже не найти. За последнее время интерес к данной отрасли значительно увеличился, особенно со стороны акул в сфере IT. Крупным компаниям, занимающимся IT, постоянно приходится изобретать всё лучшие решения, которые помогли бы работать с огромными объёмами данных. Хоть о данном вопросе уже слышали многие, но представление имеют лишь единицы. Мало, кто знает о специалистах в данной сфере и о том, чем они занимаются. Если у вас мало информации об этой сфере, но есть интерес, добро пожаловать к прочтению данного материала. Что делает отрасль Data Science? Data Analyst – это те сотрудники, у которых в обязанности входит обработка, анализ данных и переработка их в результаты понятные для человека. Сюда обычно относят спецов в машинном обучении, биг дата, data mining и аналитиков. Data Scientist - эксперты в сфере аналитической обработки информации, обладающие навыками для достижения относительно сложных целей. Конечно же, чертой хорошего специалиста является любопытство, за счёт которого и удаётся находить экстраординарные способы решения задач. Очень часто они имеют математические склонности ума, хорошо владеют компьютерами и всем, что с ними связано, а также от части являются трендспоттерами. От Data Scientist требуется наличие практических навыков и знаний, основанных на реальных проектах. Им нужно знать основные способы статистического анализа, уметь справляться с огромными базами данных, обладать способностью к нахождению закономерностей в этой информации. Одним из важнейших навыков является умение строить математические модели. Как стать специалистом в машинном обучении и Data Science? Существует множество уроков, книжек и материалов для изучения Data Science. Мы за самостоятельное изучение, но зачастую оно не дает нужного эффекта. Обучаясь со специалистами, вы получаете не только теорию и практику, но также поддержку со стороны лектора, новейшие материалы и реальный шанс на получение желаемой должности после обучения. В SkillFactory предлагают освоить специализацию в три этапа. У ребят открыт набор на курс ""Практический Machine Learning"", где под руководством опытного data scientist’а вы освоите все современные методы машинного обучения и научитесь работать с нейронными сетями. Этот курс даст возможность перейти на следующую ступень — Deep Learning, где вы пройдете полный путь от аренды GPU-сервера до создания полноценной рабочей модели для компьютерного зрения, анализа естественного языка и рекомендательных систем. А для желающих охватить сразу весь цикл обучения Data Science, начиная с изучения языка Python для анализа данных, классического машинного обучения и, наконец, перейти к нейросетям и deep learning, стартовал набор на курс ""Специализация Data Scientist"", после прохождения которого вы сможете на практике решать задачи машинного обучения и начать карьеру как Data Scientist. Что необходимо знать? Сфера Data Science довольно объёмная и, не будем скрывать, сложная. Поэтому к специалисту предъявляется немало требований. Ниже описаны основные знания, которыми нужно обладать. Визуализация массивов информации. Для лучшего понимания содержимого данных и их анализа нужно часто перерабатывать сухой текст в наглядную графику; Машинное обучение – это одно из направлений ИИ, в основе которого заложены математические начала и автоматизация; Глубокое обучение – это подвид машинного обучения, в котором применяются данные для создания моделей в сложных абстракциях; Определение образов является технологией, отвечающей за определение конкретных шаблонов среди всего потока данных. Часто применяется вместо машинного обучения; Сбор данных подразумевает получение информации в неподготовленном виде и переработка её в формат, который уже может использоваться человеком; Аналитика текстовых данных - анализ всей полученной информации для обнаружения закономерность и построения бизнес-идей. В дополнение к выше перечисленному следует иметь уверенное понимание: Принципов статистики; Статических языков программирования, лучший из них Python, но также часто используется SAS и R; Основных баз данных: Postgres и MySQL; Компьютерных технологий по визуализации информации; Набора Hadoop и модели MapReduce. Зарплаты В нынешнем состоянии рынка труда, Data Scientist в Америке в среднем зарабатывают $91 тысячу, но всё зависит от опыта. Ниже приведён скриншот зависимости заработной платы от опыта. В отечественных реалиях эта цифра намного меньше. Начинающий специалист может получать около 60-90 тысяч рублей ежемесячно. Заработок экспертов доходит до 220 тысяч рублей. Что конкретно делают работники этой сферы? Какие поручения выполняют специалисты в ежедневной рутине? Их жизнь постоянно связана с ограничениями, которые препятствую в реализации новых решений. Норма жизни Big Data спецов – решение методологических, технических и других проблем. Им постоянно приходится анализировать, открывать новые закономерности и строить прогнозы. Это по большей части научная сфера, в которой есть и доля творчества. Специалисты должны иметь незаурядную смекалку, которая поможет им находить решения трудных задач. Творческая нотка поможет им в удачной визуализации данных. Для примера рассмотрим жизненную задачу Data Scientist: «Джонатант Голдман – это специалист в сфере физики, проходящий обучение в Стэнфорде. Он получил работу в известной соцсети LinkedIn и в его обязанности входила работа, которую нельзя замерить по KPI или увидеть её наглядный результат. Работа заключалась в искоренении багов сайта и внедрении фич. Остальная часть разработчиков постоянно раздумывала о способах модернизации сайта и увеличении его пропускной способности. Голдман отвечал за разработку системы, которая бы подсказывала пользователю профиля, кто ещё на сайте может быть ему знакомым. Голдман добился того, чтобы компания попробовала внедрить данную модель. Он принёс социальной сети миллионы дополнительных просмотров, а значит – существенно ускорил её развитие». Не существует какого-то универсального определения данной профессии, очень многое зависит от направления деятельности. Тем не менее есть те задачи, которые выполняет каждый из Data Scientist: Сбор огромного объёма неупорядоченных данных и их переработка в доступный для понимания формат. Достижение бизнес-задач, связанных с применением данных; Применение нескольких языков программирования; Постоянная работа со статистикой; Применение аналитических способов структурирования данных; Баланс между ИТ и бизнесом; Поиск закономерностей и создание шаблонов, выявление трендов и тенденций, что можно использовать компанией для увеличения заработка."
3;В каких сферах стоит использовать Python;Язык программирования Python действительно универсален. Он применим во многих сферах информационных технологий, разработки и программирования. Автоматизация. Самой очевидной задачей для Python является автоматизация. Язык позволит быстро адаптировать рабочие процессы при помощи доступных библиотек. Даже начинающим программистам будет несложно их освоить, а затем применить в работе. Теперь можно забыть о рутинных повторяющихся задачах, написав несложный код для автоматизации. Веб-скрейпинг. Для сбора данных с различных сайтов имеется свое определение – веб-скрейпинг. Процесс чаще всего используют в своей работе аналитики различного профиля. Но данные сегодня окружают нас повсюду, поэтому собирать их нужно специалистам многих профессий. А инструмент для облегчения этого процесса и предлагает язык программирования Python. Он именуется скрейпер – автоматический бот, который пособен быстро и достоверно копировать огромный поток данных с сайтов и вставлять их в определенную таблицу. Реализовать скрейпера при помощи Python несложно, а польза – колоссальная. Представьте, что больше не нужно выполнять сбор вручную и тратить по несколько часов к ряду, все доступно автоматически. Получайте миллионы точек данных из интернета всего за несколько минут и используйте в своих целях. А если поток небольшой – скрейперу удастся выполнить задачу всего за пару секунд. Анализ данных и наука о данных. Интернет наполнен огромным потоком данных, пользователи ежесекундно делятся друг с другом какой-либо информацией. В каждой даже небольшой компании хранятся и постоянно задействуется сотни терабайт инфы. Многие даже приравнивают последнюю к нефти за ее ценность в сегодняшних реалиях. А по прогнозам к 2025 году объем генерируемых данных в мире может вырасти на 530%. Язык программирования Python дает возможность производить обработку, чистку и визуализацию данных. Все это доступно при помощи различных библиотек, например Numpy, Seaborn и пр. Также его используют для машинного обучения. Профессионалы, которые работают в сфере науки о данных, применяют Python в работе моделей, предсказывающих определенный ответ после анализа переданной информации. Веб-разработка. Для работы с бэкенд в распоряжении Python имеются сразу несколько годных фреймворков. При помощи Django и Flask можно создать отличную серверную часть сайта. Но для фронтенда потребуется обратиться к старым добрым JS, HTML и CSS. Наиболее простой из них конечно HTML, а при использовании языков CSS и JS достаточно просто применить Bootstrap, чтобы не прописывать код с нуля. Сегодня Python используют многие сайты от мала до велика в качестве отличного инструмента в бекенд-разработке. Машинное обучение и ИИ. Машины уже во всю способны обучаться при проведении автоматизированного анализа некоторого объема данных. При этом в процессе машинного обучения минимизирована потребность в программировании. Для реализации таких задач подходят множество библиотек, например, Numby, PyTorch, Pandas и пр. С их помощью можно легко осуществить все математические расчеты, т.к. они способны сделать их автоматически без человеческой помощи. Достаточно будет создать алгоритм и все готово! Остается лишь провести анализ полученных результатов и подобрать оптимальное решение для дальнейших задач.
4;Что не нужно делать при помощи Python;Несмотря на масштабное использование Python в разных сферах IT, он все же не является идеальным решением для некоторых задач. Есть более подходящие ЯП для реализации следующих процессов. Разработка игр.Да, мы тоже знаем, что в Python есть библиотека Pygame, которая подходит для разработки игр, но вопрос “каких?”. С ее помощью можно создать примитивную “Змейку”, а вот на что-то большее она не способна. В библиотеке не найдется и четверти функций, которые нужны хотя бы для обычной аркады или маломальского шутера. Для геймдева идеальным инструментом станет С++. Он сегодня является самым востребованным языком для реализации игровых движков. В нем также имеются все инструменты для отличной графики и звукового сопровождения. Даже ботов на базе искусственного интеллекта можно с легкостью внедрять в игру, написанную на С++. Кроме того, для создания полного жизненного пути игры подойдут Java, JS и C#. Десктопные приложения. И для реализации десктопных приложений имеются библиотеки, по типу Tkinter. Последняя позволяет сделать какой-никакой GUI – графический интерфейс пользователя, но он не будет иметь ничего общего с качественным продвинутым продуктом. Приложение можно реализовать только со стандартным и примитивным интерфейсом. Для чего-то более глобального и стоящего лучше использовать C#, С++ и Java. Также Python не лучшее решение для реализации проектов, требующих высокой скорости выполнения кода. Если важна каждая секундочка – лучше использовать другие более быстрые языки программирования. Да, его не рекомендуют использовать именно для масштабных продуктов по типу ОС, микропроцессоров и космических аппаратов НАСА, но для остального он вполне сносный. А к более быстрым и оправданным языкам программирования можно отнести С и С++.
5;Кто это – Python разработчик?;Python входит в ТОП-3 самых популярных языков программирования вот уже несколько лет подряд. Это объективные данные Stackoverflow, системы вопросов и ответов для программистов со всего мира. Многие программисты начинают свой путь в разработке, именно с него. Одной из причин такого явления считается отсутствие потребности в глубоком понимании других языков. Язык программирования Python отличается своей простотой как в обучении, так и во взаимодействии с ним. Специалисты используют его возможности практически повсеместно для: Веб-разработки. Язык имеет несколько популярных фреймворков для работы. Например, Django и Flask. С их помощью намного легче писать код, управлять инструментами и реализовывать весь жизненный путь приложений. В них в качестве панели управления имеется CMS, готовые системы для авторизации и инструменты для работы с базами данных. Django выбирают большинство программистов для выполнения своих ежедневных задач. Математических вычислений. Для выполнения этих задач также найдется множество готовых инструментов. Например, библиотеки Matplotlib и seaborn ориентированы для перевода информации из двухмерной графики в визуал, а SciPy для расчетов научного и инженерного типа. Программного обеспечения. При использовании внутренней библиотеки tkinter получится разработать ПО под любую ОС. А за счет высокой производительности самого языка, этот процесс будет удобен в реализации. ИИ. Достаточно создать пару строк кода, чтобы заработал готовый ИИ с самообучающейся системой. Так, с его помощью легко перевести любой код, написанный на Python, в С++, который будет более быстрым. С этими возможностями язык еще более прост и идеален для работы. Автоматизации. Достаточно написать нужный скрипт, и он поможет в автоматизации всей работы. Его также можно проработать и использовать для выполнения других задач. Машинного обучения. С помощью специального набора алгоритмов достаточно загрузить лишь начальные и конечные данные какого-либо массива, чтобы заработала матрица. После того как информация пройдет через нее, программист получит желаемый ответ. Кроме того, эти алгоритмы также можно научить искать закономерности в потоке разных значений, чтобы они самостоятельно приводили к нужным результатам. Глубокого обучения. Это разновидность машинного обучения, в основе которой лежит обучение представлениям, а не алгоритмам, что позволяет создать целый комплекс, подобный нейронным связям человека. С его помощью можно автоматизировать многие процессы, связанные с обработкой данных.Администрирования. С помощью командной оболочки Bash администраторы также могут автоматизировать многие рабочие процессы. Python разработчик, как правило, специализируются в создании разных продуктов, отвечающих целям проекта. Чаще всего это разработка всей серверной части веб-приложений. Успешный специалист умеет качественно выполнять все этапы – планировать, писать масштабируемый код, проводить тестирование и выводить продукт на рынок. Программист должен иметь большой опыт ведения проектов и уметь подстраиваться под все условия его создания.
6;Что должен знать каждый разработчик Python: 8 основных технологий;"У каждого разработчика имеется свой набор технологий и инструментов, которые он использует в своей работе. Их выбор осуществляется в течение всего профессионального пути. Так, специалист что-то находит удобным, а что-то нет и формирует свой личный список фаворитов. Сегодня мы решили помочь как начинающим разработчикам Python, так и спецам, поэтому разберем 8 необходимых технологий, без которых никак не обойтись в работе в любой сфере от инжиниринга до бекенда. И нет, этот список не взят с потолка, он основан на опыте профи и стандартных списках требований к кандидатам различных мировых компаний. Алгоритмы Для того чтобы быстрее и эффективнее решать задачи, где фигурируют большие данные – пригодятся алгоритмы. Они помогут получить результат с меньшими затратами ресурсов, а вам не придется корпеть над каждым решением. Для их понимания достаточно прочесть книгу Адитья Бхаргава “Грокаем алгоритмы”, она написана понятным языком, и с ней вы узнаете все, что пригодится в работе: определение алгоритмической сложности; понятие об О-нотации; правила оценки сложности алгоритма (очень пригодится на собеседовании); виды алгоритмов сортировок и их особенности. Главное, книга поможет не зацикливаться на зубрежке, которая лишь отнимет время, а понять принцип и концепцию. Git Распределенная система управления версиями – Git – это must-have при работе с большими проектами и выполнении задач вместе с другими разработчиками. Она позволяет отслеживать и фиксировать все изменения внесенные по ходу работы, что исключает риск потери какой-то части кода. Git лидер среди подобных себе систем, но чтобы преуспеть в ее использовании следует также изучить: разные типы команд – от add до merge и rebase; виды и правила создания репозиториев; умение делать коммиты и работать с ними; научиться работать с ветвями. SQL и базы данных Среды, где хранятся все необходимые данные – это пожалуй самое простое для понимания и самое важное в работе. Но для работы с ними требуется ориентироваться во многих аспектах: особенностях и правилах использования базы данных реляционного типа; понятии и правилах использования NOSQL; понимании всех команд для создания и управления таблицей; работе с выборками по колонкам при разных условиях. Совет, если задачи между таблицами можно решить с использованием join, лучше применять первый вариант или оба сразу, а если они связаны с постоянно переменными структур данных – подойдет NOSQL. Агрегационные функции Учить все агрегационные функции необязательно, но важно разобраться с count, average, groupby и sum, а также понимать, каким образом они функционируют и для чего используются. Например, их можно применить для расчета среднего значения в одной колонке. Достаточно взть функцию, свести все к одному значению и распределить группировку для нее. Также пригодится join. Они помогут создать сравнение двух несвязанных друг с другом таблиц, сделав подселекты и собрав все стыковочные данные. Понимание оконных функций – не обязательно, но если вы хотите стать гуру SQL, то можете заморочиться и с ними. Алгоритмы на графах Графы это абстрактное изображение соединений между разными группами посредствам точек и линий. Точка является вершиной графа, а линия – ребром, соединяющим две эти точки. Количество ребер определяет степень вершины. А алгоритмы на графах – это тот же граф, который удовлетворяет операциям алгоритма. Для ориентирования во всех этих процессах следует изучить поиск в ширину и глубину, а также алгоритм Дейкстри. Например, когда создается даже самый элементарный файловый менеджер и необходимо найти определенные файлы – это является стандартным примером поиска в ширину или глубину. Такой же принцип, когда необходимо создать или удалить файлы по одному из условий в созданном скрипте. Чтобы ускорить эти процессы и не осуществлять поиск вручную, достаточно изучить алгоритмы на графах. Рекурсия Рекурсия – это элемент, который легко можно заменить на цикл и, наоборот, цикл также легко заменить рекурсией. При этом ее писать намного сложнее, так же как и поддерживать. Хотя есть ситуации, когда именно цикл сложен в реализации, тогда на помощь придет, вызывающая сама себя, функция. Если предупредит возможный риск ошибки максимальной глубины и не обращать внимание на затраты памяти, то рекурсию можно применять даже в работе алгоритмами. Структуры данных Для оптимального хранения данных в работе придется использовать структуры данных. А чтобы работать с ними, потребуется знание следующих аспектов: хеш-таблицы; графы и массивы; множество и связанные списки; стеки, очереди и деки. Docker Отличным инструментом для автоматизации управления и взаимодействия с различными приложениями является Docker. Для работы с ним потребуется знание: образа и контейнера; сетки и тома; правил написания файлов. Без понимания этих вещей не удастся понять даже базовый принцип работы инструмента."
7;Принцип работы беспилотных машин;В автомобильной сфере бесспорное будущее за автономными автомобилями. Мы расскажем про принцип работы беспилотных автомобилей на реальных примерах. Автомобили, управляемые беспилотными системами, обладают множеством датчиков и других инструментов для обнаружения состояния внешнего пространства: камеры, GPS-навигаторы, радары и прочее. Они создают огромное количество данных, которые должны быть обработаны в режиме реального времени. Система обязана не только проанализировать полученную информацию, но и построить на её основании траекторию, скорость движения. Все перечисленные задачи выполняет искусственный интеллект (ИИ). Технологический мир старается подстроится под данную тенденцию. Уже сегодня крупные автоконцерны Ford, Lyft и Volvo в сотрудничестве с Uber разрабатывают масштабные проекты умных машин. Уже в скором будущем Nissan планирует выпустить полуавтономные машины. Ford в свою очередь заявил о намерении к 2021 году выпустить серию автономных авто. По факту – все гиганты сферы IT и других сфер технологий направлены на развитие или участие в испытаниях транспортных средств под руководством программ. Не отстаёт здесь и Google, но инвестиции направляются через Waymo – дочерняя компания. Одни из главных приверженцев беспилотных авто с электрическим питанием – Илон Маск и его компания Tesla. AI – это ключ к успеху в сфере беспилотных устройств. Ключевые игроки технологического и автомобильного рынка нацелены на использование крайне обширных ресурсов для создания AI и отдельных конструкционных компонентов, требуемых для решения поставленной задачи. К примеру, Toyota вкладывает $1 млрд за 5 лет, чтобы построить компанию TRI (Research Institute), которая находится в Силиконовой долине. Она предназначена для углублённой разработки этого инструмента. На проект полагают большие надежды, так как к нему были привлечены 200 специалистов из Массачусетского технологического университета. TRI планирует заняться исследованием автономных ТС и поведенческих факторов человека как на водительском сидении, так и снаружи авто. Предполагается, что разработанные технологии существенно облегчат работу беспилотным системам и помогут оказывать помощь людям со специфическими потребностями. В сотрудничестве Nvidia и Audi были разработаны прототипы Q7, они способны самостоятельно принимать решения на дороге посредством глубокого обучения – это специальный способ обучения, которая помогает система обрабатывать большие объёмы данных. Посредством применения нейронных сетей машинам удаётся находить, распознавать и реагировать на любые ситуации, в том числе сложные. Больше интеллекта равносильно большей безопасности В отношении сферы безопасности, ИИ позволяет программируемому автомобилю полноценно понимать окружение, определять и вычислять риски, а также принимать экстренные меры при появлении опасностей. Невозможно создать беспилотный авто, способный видеть все окружающие объекты, в том числе тротуар, фонари на улице, здания и припаркованные машины. Чтобы решить проблему создают компьютеры, способные отличать предметы друг от друга и определять базовые параметры вещей: скорость, габариты, тип. Прежде датчики не видели все объекты, но после исследования и анализа обстановки, ИИ различит предметы и добавит в каталог для будущего использования. Искусственный интеллект учитывает различные свойственные предмету риски: мотоцикл у дороги, любое животное, особенно в движении. Компьютер учитывает вероятность, что собака может броситься под машину. Другая важная задача – отличить пешехода и велосипедиста как в процессе движения, так и статическом положении. Автономное авто способно идентифицировать наличие тротуара, высоту бордюры, расстояние до разделительной полосы и её тип. Компьютер непрерывно получает данные с датчиков и анализирует окружающие предметы. Если он обнаруживает место или объект, который ранее не встречался, он самостоятельно просчитывает риски несчастных случаев. Современные системы помогают делиться информациях об вещах и рисках между собой. Подобный принцип реализовала Toyota, методика называется Intelligent Transportation System Connect. Она успешно работает в Японии. Искусственный интеллект в салоне автомобиля Не меньшее влияние ИИ будет оказывать на внутреннюю жизнь пассажиров в салоне. Автомобиль будет уметь подстраиваться под водителя, определять частые маршруты с учётом времени дня. ИИ сможет запоминать любимые радиостанции, самые востребованные настройки, распознавать водителя и самостоятельно подстраивать высоту сидений, руля и влиять на другие полезные функции. Все перечисленные данные помогут авто стать адаптивным инструментом для успешной эксплуатации в любой среде с возможность подстраиваться под стиль вождения. Для водителя планируется предоставлять полезные услуги: регулировка режима передвижения, возможность автономного вождения в рамках особых сценариев, показ мест с пробками или инцидентов на привычном, запрограммированном маршруте. Уже сегодня есть машины, способные управлять передвижением на конкретных скоростях и в особых условиях, но они все равно частично зависят от водителя. Полностью автономное управление на общественных дорогах в ближайшее время (2-3 года) не ожидается. После выхода автономных машин в общественное пользование, в них обязательно реализуют большинство решений, которые были залучены в ходе исследований ИИ.
8;5 мифов о специальности Data Scientist;Эта профессия относительно новая, поэтому она пока остается овеянной мифами. Мы решили рассказать вам о самых популярных заблуждениях относительно Data Science и заодно окончательно их развеять. Без специального образования нельзя стать исследователем данных Это один из наиболее распространенных предрассудков – что Data Scientists обязательно должны быть специалистами в математических науках и статистике. Конечно, базовое понимание необходимо, но у многих разработчиков оно и так есть благодаря курсам, прослушанным еще в вузе. Вы можете работать в сфере Data Science и без степени в статистике либо математике. Тем не менее, если вы хотите заниматься серьезными проектами, вам будет необходимо постоянно расширять свои знания. Чтобы попасть в эту профессию, нужен диплом На самом деле, освоить все знания, умения и навыки, необходимые Data Scientist, можно самостоятельно. Главное понимать, что специалисты этой сферы бывают двух типов: те, кто работает с прикладной наукой, и те, кто занимается исследовательской. Первая подразумевает работу с уже существующими алгоритмами, а значит нужно понимать их особенности. Основная задача прикладных специалистов – применять методы науки о данных в конкретных программах и проектах. Главным образом в профессии необходимы именно специалисты-прикладники. Но если вам хочется стать исследователем, тогда диплом кандидата наук очень пригодиться: скорее всего, вам понадобятся навыки создания уникальных алгоритмов, умение их тестировать, оптимизировать, а также писать научные статьи и пр. Так что если вы планируете достичь больших высот в карьере, получить ученую степень – замечательная идея. Но обратим ваше внимание: получение степени требует больших затрат: и времени, и финансов, и моральных сил. Так что первым делом хорошо подумайте: в каком направлении вы стремитесь развиваться? Прежде чем идти в Data Scientist, обязательно задумайтесь над этим! В Data Science нуждаются исключительно крупные организации, располагающие большими ресурсами Большинство предпринимателей неправильно понимают Data Science. К сожалению, очень распространено заблуждение, будто эта наука необходима лишь крупным фирмам. В его основе лежит неправильное представление, какие существуют требования к сфере обработки данных, и какую ценность она представляет для бизнеса. На самом деле, аналитическая структура не обязательно должна быть большой – чаще всего достаточно лишь группы людей и вполне разумных финансовых вложений, чтобы точно и эффективно обрабатывать данные. Еще один популярный миф о Data Science в бизнес-проектах: многие считают, что с помощью науки о данных можно найти решение любой проблемы. В результате заказчики ожидают получить от команды результаты, которые просто нереально достичь. Суть Data Science заключается лишь в построении моделей Довольно распространено мнение, что Data Science = создание моделей, значит, Data Scientist занимается только их построением, видоизменением и оптимизацией. В действительности же работа этих специалистов включает гораздо больше аспектов: это и поиск данных, и отсеивание ненужной информации, проверка, обработка, исследовательский анализ, прочее. Т.е. построение моделей – всего лишь один из множества уровней, которые составляют весь жизненный цикл любого проекта. А выглядит он приблизительно так: Формулировка задач. Выдвижение гипотезы. Поиск и сбор данных. Фильтрация, очистка информации. Исследовательский анализ. Разработка проекта модели. Тесты или верификация модели. Повторная проверка и доработка в случае выявления ошибки. Развертывание модели – старт производства. В будущем на смену Data Science придет ИИ Чем дальше, тем больше сфера Data Science автоматизируется. Поэтому и возникло популярное заблуждение, что совсем скоро ИИ полностью заменит человека. В качестве главного аргумента часто называют то, что компьютер, как правило, умеет находить закономерности лучше любых профессионалов. Но на самом деле это не играет ключевой роли. Скорее всего, ИИ действительно доверят выполнение определенных рутинных задач, например, очистку данных или их подготовку. Но с основными интеллектуальными операциями способен справиться только человек. Естественно, что большинство задач в Data Science хотят автоматизировать, поэтому разрабатываются все более совершенные и сложные алгоритмы, которые обладают достаточным потенциалом, чтобы прийти на замену Data Scientists. Но полное замещение все еще остается маловероятным, ведь какой бы продвинутой ни была информационная система, ей все равно необходимо человеческое руководство и готовый набор базовых инструкций.
9;Что такое REST API? Разработка RESTFul проекта на Python Flask;"Что такое REST API? Чтобы нам было проще все понять рассмотрим небольшой пример. Предположим, что у нас есть некое полноценное веб приложение. Такое приложение или другими словами такой веб сайт состоит из двух частей: Клиентской стороны; Серверной части. Всё что увидит пользователь и всё с чем он будет взаимодействовать – находится на клиентской стороне. Всё что касается базы данных, работы с куки и сессиями, настройкой сервера и так далее – находится на стороне сервера. Обычно для этих двух вещей используются противоположные технологии. К примеру, функционал клиентской стороны – Vue JS, а функционал серверной стороны – язык Питон. Конечно же, вместо Vue JS и Python можете подставить другие технологии и языки, что выполняют схожие действия. Так вот, получается задачка. Каким образом соединить две абсолютно разные технологии, дабы они понимали друг друга? Здесь нам на помощь и приходит REST API. Принцип обращения С давних пор программисты стараются отделить две максимально смежные сферы: Front-end (внешняя часть проекта, его дизайн); Back-end (серверная часть проекта, его функционал). Вы можете всё так настроить, что пользователь может напрямую ссылаться к серверу за счет протокола «http». Такой метод широко применяется, но также ему существует более хорошая альтернатива – REST API. Именно она позволяет отделить обе составляющие. Таким образом, Back-end и Front-end разработчики никак не будут конфликтовать между собой. Основные действия При работе пользователя с базой данных ему приходится выполнять несколько базовых действий: создание записи; чтение записей; обновление записей; удаление. Такие действия дополнительно называют сокращенно CRUD (Create, Read, Update, Delete). Суть REST API заключается в том, чтобы вы с клиентской стороны обращались по определенным URL адресу к вашему проекту, а он в свою очередь выполнял нужное действие и возвращал объект с данными в формате JSON. Пример использования Представим что у нас есть некий сайт «itproger.com». Нам необходимо получить все статьи из базы данных. Мы можем послать прямой «http» запрос и намешать Front-end и Back-end воедино. Вместо такого подхода мы с вами делаем следующее: Создаем новый файл на сервере по адресу «http://itproger.com/api/articles»; В файле прописываем код на серверном языке: Python, Java, C#, PHP или на другом; В коде мы обращаемся к БД и выбираем все статьи из таблицы «articles»; Там же мы конвертируем результат в JSON формат и выводим на странице. Теперь со стороны клиента мы можем обратиться по этому URL адресу и сразу при обращении мы получим все записи из БД. Получается, что Front-end и Back-end теперь максимально разделены. Все что их соединяет, так это один URL адрес. Обратившись по адресу, мы получим JSON объект, а перебрать таковой объект будет просто при использовании любой Front-end технологии: будь-то обычный JavaScript или фреймворки по типу: Vue JS, React JS, Angular и прочие. По схожему принципу реализуются и другие файлы и URL адреса. К примеру, для получения конкретной записи можно создать страницу «http://itproger.com/api/articles/1». Вместо единицы может идти любое число и это будет уникальный идентификатор записи, которую мы хотим получить. Можно отсылать разные HTTP запросы. Если мы отсылаем запрос GET, то мы получаем все записи или одну запись (в зависимости от URL). Если отослать HTTP запрос POST, то мы будем помещать новую запись.  Если PUT – обновление записи, а если DELETE – удаление записи. Отличие между Rest и Restful На самом деле эти два понятия являются одним и тем же. Если вы создаете проект и в нем реализовали только URL для выборки данных, то это REST приложение или его ещё называют REST like приложение. Если вы реализуете все серверные функции через REST, то это будет законченным REST приложением или другими словами RestFul приложение. Слово API в названии всегда будет, ведь оно означает обращение одного проекта к другому. При работе с REST у вас в любом случае происходит обращение со стороны Front-end на сторону Back-end."
10;Почему ненавидят PHP? Какое будущее у PHP;Многие программисты имеют холодное отношение к PHP, а другие – вовсе ненавидят язык. Действительно ли он настолько плохой? Мы постараемся разобраться. Есть масса причин для «ненависти», у каждого разработчика они свои. Часть из них являются реальными проблемами языка, но некоторые всего лишь результат предвзятого отношения. Даже наличие плохих отзывов об языке не является причиной полностью сбрасывать PHP со счетов. Даже сегодня он входит в 5 самых распространённых и популярных языков (по состоянию на 2018 год). Он занимает место среди других гигантов: Java, JS, C# и Python. Многочисленные аналитические компании не замечают падения рейтингов PHP, даже порой отмечается постепенный прирост. Одной из причин притока программистов является лёгкость обучения, после знакомства с PHP многие переходят к обучению Java или других языков. HTML файл с логикой Неприязнь к PHP часто обуславливается помещением кода в HTML-файл и дальнейшей обработкой внутри. Да, эти файлы имеют соответствующее расширение .php, но здесь доля чистого PHP часто меньше, чем остальных языков. Внутри файла размещаются HTML, CSS, JS коды или загружаются скрипты. Подход не позволяет обеспечить полную чистоту кода, хотя при должных навыках можно структурировать файл так, чтобы все элементы были легкодоступны, аккуратно сложенные и понятны. Явное преимущество PHP – простая работа с шаблонизаторами, их можно разрабатывать самостоятельно, или просто разбить код на отдельные файлы, отвечающие за конкретные функции. С разбивкой кода по файлам удаётся исключить из него HTML, останется всего несколько строк. Нельзя назвать проблему важной или критичной, так как на стабильность работы системы или логичность расположения данных это не влияет. Оформление напрямую зависит от разработчика, при желании можно сделать вполне красивый и правильный код. Качественные пакеты Bundler, PIP, NPM, CPAN и другие – это пакеты, помогающие писать код качественно. Посредством подключения стороннего кода удаётся повысить производительность труда и расширить возможности языка. Есть одна проблема – перечисленные пакеты написаны на других языках: Ruby, Python, Node JS, Perl. Собственного, структурированного пакета в PHP практически нет, за исключением PEAR. Имеющийся пакет используется нечасто, так как он имеет низкое качество и не соответствует требованиям современного кода. Разработан специальный стандарт PSR-0, который помогает в работе всех пакетов при одновременном подключении. С помощью Composer удаётся получить полноценный менеджер, обеспечивающий определение зависимостей у библиотек PHP. Уже совсем скоро планируется значительное улучшение качества кода и весомое сокращение затрат времени. Проходят времена, когда приходилось разрабатывать решение и затачивать его под конкретный фреймворк. Проблема действительно существует, но разработчики знают об её существовании и ищут способ убрать лишние сложности. Устаревшие понятия Только в моём кругу есть масса матёрых разработчиков на Ruby, которые по привычке используют пятую версию языка, думая и уверяя других в отсутствии каких-либо значимых изменений в PHP 7. В действительности отличия существуют, и они весомые. Со стороны Ruby-разработчиков часто летит заявление в адрес PHP, что у него нет «method_missing», но это не совсем так, ведь в реальности альтернативой является __call (). Люди привыкли жаловаться, они часто это делают в отношении проблем, которые уже были устранены в новых версиях. Получается так, что большинство людей, высмеивающих PHP, даже не знают о разработке новых версий языка или просто не обладают достаточным уровнем навыков. Ещё часто к PHP относились пренебрежительно по причине отсутствия встроенного сервера (у Ruby он есть), но сейчас и PHP обзавёлся этим дополнением. Незнание реальности языка, работа с устаревшим кодом, заблуждения – это частый повод бросать не лестные заявления в адрес PHP. Предвзятое мнение Не прибегать к PHP – это круто. Причина отказа от языка лежит в воспоминаниях, разработчик помнит, как он писал кривой код и скрипты в детстве. Никто не хочет становиться на уровне с новичками, которые усердно пишут ужасные скрипты на PHP. Для хорошего разработчика здесь есть место, перечисленные моменты не являются проблемами. Ещё одно заблуждение – человек использующий PHP не в силах освоить какой-то другой язык. Здесь уже я ненавижу подобное предвзятое отношение. Встречалось мнение, слышал его краем уха возле бизнес-центра: «У меня нет никакого доверия к магазинам на PHP. Почему разработчики не способны освоить хороший язык?». Это мнение многих программистам, но подобные заявления свидетельствуют о недальновидности разработчика.
11;10 идей проектов для резюме и закрепления навыков;Современное ПО по большей части представляет собой SaaS и web-приложения. Это значит, что вам необходимо уметь программировать онлайн и, конечно же, демонстрировать эти навыки в своем резюме. Совет: сходу создать полноценный веб-сайт или ПО сложно. Для начала поработайте над страницей входа или главной страницей, на которую пользователь попадет после осуществления входа в систему. Пытаясь сразу взяться за весь проект целиком, вы наверняка потерпите поражение. Развлекательные платформы Веб-парсер, автоматически публикующий 10 наиболее популярных блогов Парсеры часто создают просто для того, чтобы улучшить навыки программирования. Но что делать с парсером дальше – после создания и очистки данных? Давайте не будем просто удалять данные, а создадим на их основе веб-сайт. Пусть парсер сохраняет данные в одну базу данных, после чего выбирает среди них наиболее популярные. Дальше он может копировать заголовок и пару предложений из текста, формировать из них сообщение и делиться результатом в Интернете. Такой проект будет действительно впечатляющим, даже не смотря на свою относительную простоту, а значит, вы сможете смело хвастать своей работой. Реализовав эту идею, вы покажете, что способны на большее, чем создавать код небольшого фрагмента системы – вы можете продумать и написать всю систему. Спланируйте автоматизацию процесса, управление БД, создание веб-сайта и технологию отбора публикаций. Пройдя данный путь целиком, вы получите отличный работающий конечный продукт. Да и кто знает, возможно, ваш сайт понравится пользователям и обретет некую популярность! Система напоминания о предстоящих событиях Часто ли вы вспоминали о каких-то важных днях, событиях или мероприятиях уже после того, как они прошли? Наверняка это периодически случается с каждым из нас. Давайте создадим свой агрегатор напоминаний (используя API Meetup и сайт Eventbrite), дающий пользователю сигнал, когда в названии или описании события будут присутствовать выбранные ключевые слова. Настроить систему вы можете по своему желанию. Платформа для публикации и просмотра контента Создавая свой проект, не обязательно изобретать велосипед. Можно попытаться скопировать любой популярный сайт, что будет не только полезно, но и интересно. Реализуйте для начала простой вариант, как например, сайт, позволяющий войти в систему, загрузить и опубликовать фото, а также пролистать ленту. В дальнейшем стремитесь добавлять функции: возможность подписаться, оценить публикацию и искать материалы. Кстати, поиск – это прекрасный шанс углубиться в машинное обучение! ПО, дающее рекомендации по подаркам Согласитесь, бывает сложно найти подходящий презент для близкого человека? Так давайте создадим сайт, который будет подсказывать, что можно приобрести в подарок другу или родственнику. В рамках данного проекта вам нужно будет разработать БД, предусмотреть функцию создания учетных записей и, как вариант, использовать API интернет-магазинов (Amazon и аналогичные площадки) для указания партнерских ссылок. Полностью справившись с этой задачей, вы сможете зарабатывать на комиссии за проданные продукты. Кроме того, здесь можно попытаться реализовать базовую модель machine learning: научить сайт определять лучший подарок на основании скорости отклика пользователей на предложенные варианты. Торговая площадка Можно создать веб-сайт, отвечающий за сделки купли-продажи. Данная концепция позволит подумать и поработать над несколькими важными функциями, поэтому без заранее продуманного четкого плана «атаковать» ее не получится. Отдельные возможности, над которыми стоит поразмыслить, – это публикация пользователями сообщений, поиск последних загруженных товаров и, возможно, сам способ совершения торговой сделки. Вовсе не обязательно стремиться сделать на 100% жизненный и практичный вариант, потому что ваша главная задача – это улучшение своих навыков программирования. B2B Программа для управления контрактами и выставления счетов Эти бизнес процессы очень сложные. Например, в контрактах обычно содержится большое количество нюансов и трудно отслеживаемых положений. Так что данный проект будет для вас хорошим вызовом. Не усложняйте себе задачу: выберите базовую функцию, допустим, ввод в БД положений контракта, и первым делом реализуйте эту часть. Дальше добавьте другие функции: отслеживание счетов, анализ контрактов и составление прогнозов. По для управления задачами Прекрасное поле для экспериментов – доски задач. Для начала настройте удобный и надежный пользовательский интерфейс. Фактически, такой проект должен быть творением двух специалистов: фронтенд- и бэкенд-разработчика. Так что это к тому же отличный шанс прокачать навыки командной работы. Доска объявлений Когда в проекте должна быть предусмотрена возможность вводить данные, причем разные для разных пользователей (в этом случае работодатели и соискатели), это добавляет любопытный аспект дизайна. Опять же, советуем не распыляться на все сразу. Сперва воплотите в жизнь возможность создавать и публиковать объявления с вакансиями. Далее сосредоточьтесь на соискателях и том, как они будут оставлять свой отклик. Портал, прогнозирующий прибыль Наборы данных большинства компаний вполне стандартизированы. Речь идет в основном про элементы бухгалтерского учета: счета, транзакции и пр. И за счет стандартизации аналитику таких данных очень легко осуществлять. Создайте информационную панель, позволяющую компаниям делать прогнозы расходов и формировать отчеты по ежемесячным расходам. В этом проекте вам также придется поработать над вопросом обеспечения безопасности данных. Но начинайте работу с создания модулей для сбора и отображения данных, и только потом переходите к их защите. Игры Snake (Змейка) С этой легендарной игрой вы наверняка знакомы. Она простая, но ничто не мешает вам попытаться ее усложнить! В собственную онлайн-Змейку вы можете добавить новые функции, например, особенные предметы или умения.
12;Что выбрать разработчику: Андроид или iOS?;Выбор между Android и iOS для разработчика вовсе не прост. Мы расскажем про плюсы и минусы каждой системы, дабы вам было проще выбрать подходящую среду. У новичков в любых профессиях появляется много вопросов, но наибольшее их количество у программистов. Самыми популярными вопросами в поисковых системах являются: какие языки и фреймворки начинать изучать для разработки на iOS или Android? Эти конкурирующие операционные системы сражаются за первенство много лет и за это время каждая обзавелась армией фанатов. Что ж, у каждого своя правда, поэтому мы пойдём по пути изучения фактов и логического мышления. Рассмотрим преимущества и недостатки каждой ОС, тогда-то уже каждый сможет определить подходящую сферу разработки для себя. Аудитория У Андроид сегодня 80% всех гаджетов в мире. Всё потому, что Android ставят к себе на смартфоны большинство известных брендов. Среди них как мировые лидеры – Samsung, ZTE, Nokia и т. п., так и китайские бренды Xiaomi, Meizu. Доходит до крайностей, даже поддельные iPhone из Китая продаются на Android. Время вспомнить о других мобильных устройствах и не только. На Андроид огромное количество умных часов, фитнес-браслетов, Smart TV и разной бытовой техники. Количество различных решений на Андроид во много раз превосходит iOS. Это значит, что аудитория продукции намного шире. Монетизация Это обратная сторона медали. Согласно статистике, iOS пользуются более платежеспособные люди, которые делают покупки в 3 раза чаще. Несмотря на меньшую аудиторию, качественные программы для iOS ценятся больше и покупаются чаще. Сложность вхождения Конечно же, чтобы начать вникать в любую из сфер, разработчику нужно иметь гаджет с подходящей ОС. Очевидным лидером здесь является Android, ведь смартфоны и планшеты, построенные на данной системе есть практически у каждого. Даже при их отсутствии, приобрести гаджет на Андроид и ПК на Windows значительно дешевле. В условиях ограниченности первых вложений, покупка iPhone и Mac может оказаться просто не по карману. В это же время создавать приложения под Android можно с обычным ПК и смартфоном. Сумма вложений для iOS – от 40 тысяч рублей, но это самый минимум, лучше – около 200 000 рублей. Для Android достаточно иметь на кармане 25 000 рублей, лучше – 50-60 тысяч рублей. Да, можно обойтись без смартфона на выбранной ОС, ведь сегодня масса эмуляторов. Однако, это не лучшее решение, ведь их производительность сильно уступает телефонам. Все разработчики в скором времени понимают, насколько много времени они теряют на устранение багов эмуляторов. Также они не могут здраво оценивать производительность приложения. Если нет желания себя мучать, подходящий гаджет обязателен. Ещё стоит упомянуть, что подписка на сервис для разработчиков Google Play стоит $25 и это одноразовый платёж. В это же время App Store стоит целых $99 и эту сумму нужно платить каждый год. Однако, по этой причине конкуренция в Google Play во много раз жёстче, чем в AppStore. Востребованность Разработчиков, работающих с iOS, значительно меньше, чем специалистов на Android. Это касается не столько числового значения, сколько востребованности. Проще говоря, количество разработчиков на Swift не позволяет полностью закрыть спрос на рынке. По этой причине компаниям приходится повышать зарплаты iOS-программистов. На различных форумах iOS-разработчики часто кичатся, что они относятся к особому, элитному классу общества. Однако, со временем многие программисты начинают изучать и Android. Практически все хорошие приложения должны присутствовать на обоих платформах. Это удвоит доход компании. Всё-таки оплата работы даже новичков iOS сейчас престижнее. Зато войти в разработку под Андроид дешевле и легче. В остальном специалисты каждой сферы оплачиваются достаточно высоко. Публикация и модерация Google Play практически не требует оплату каких-то услуг, а размещение приложения – это дело пары часов. Предварительная модерация выполняется роботами, которые преимущественно проверяют приложение на наличие вирусов. Модераторы занимаются приложением только в случае огромного числа жалоб. Из-за простоты размещения, приложений здесь очень много, ежедневно появляются десятки или даже сотни новых. Однако, хороших разработок не так-то и много. Здесь всё неоднозначно. Конечно, мы получаем уверенность в том, что программа пройдёт модерацию, но вот без раскрутки очень низкая вероятность самопродвижения приложения. В iOS всё иначе. Модерация приложения может занимать не один месяц, и в конце концов запрос могут отклонить. Зато в случае публикации программы, она получает намного больше шансов на выживание в своей среде.
13;10 рекомендаций начинающему веб-разработчику;Многие важные вещи опытным специалистам кажутся очевидными, тогда как новички о них часто и не задумываются. Вот почему мы хотим подсказать вам несколько правил успешного старта. Вникайте и дерзайте! Если вы услышите, что программирование – это нетяжелый труд, не думайте, будто вас в этой сфере не ждут никакие сложности. Имеется ввиду, что вам просто не придется таскать тяжести :) А вот голову поломаете изрядно. Что нужно выучить первым делом? Какие знания и навыки необходимы для старта и быстрого развития? Какими инструментами лучше пользоваться? Давайте поговорим обо всем по порядку. Для начала теоретические советы: Поставьте перед собой конкретные цели Что чаще всего пишет в поисковике человек, решивший стать айтишником? Конечно же, «какой язык программирования выучить первым/новичку?». Но это неправильный вопрос, потому что отталкиваться нужно от того, зачем вы хотите научиться кодить. Определитесь с конечной целью: например, создавать мобильные приложения или веб-сайты для представителей малого бизнеса? Так вы сможете выбрать для изучения только действительно необходимый и полезный материал, а значит, не потратите зря драгоценное время. Правильно оцените дистанцию: вы не спринт бежите, а марафон Вокруг так много заманчивой рекламы, что кажется, попасть в IT ну совсем несложно: пару месяцев и ты – востребованный специалист. Конечно, у многих получается быстро постичь азы профессии, но чтобы овладеть всеми нюансами веб-разработки нужно время. Возможно даже годы. Торопитесь медленно Надеемся, вы уже поняли, что освоить программирование довольно трудно. Но все равно новички хотят сделать это максимально быстро. Самые отчаянные готовы заниматься по 6-8 часов в день, иногда даже забывая про обед. Заметьте, в таком случае есть большой риск вымотать себя и перегореть. Лучше начинать медленно: пары часов в день вам хватит с головой. Конечно, чем больше учиться, тем быстрее научишься. Но набирать обороты нужно постепенно. Как говорится, лучше медленно, но уверенно. Учитесь находить ответы и решения быстро Важнейший навык любого разработчика – умение самостоятельно и быстро решать проблемы. Даже самые опытные программисты не могут знать все: каждому время от времени приходится обращаться за помощью к Google. И если сначала на поиск нужной информации у вас будет уходить 2-3 часа, то со временем вы начнете делать это гораздо быстрее. А с умением мгновенно исправлять самые распространенные проблемы улучшиться и эффективность, и скорость вашей работы в целом. Теория должна подкрепляться практикой Без практики знания мертвы и поверхностны. Поэтому, прочитав главу учебника, статью или просмотрев видео, сразу заходите в редактор кода и воплощайте в жизнь то, что узнали. Реализуйте свои идеи или повторите примеры, приведенные в учебном материале. Смиритесь с неудачами Как бы нам ни хотелось делать свою работу идеально, ошибки совершают все. Поэтому если вы заранее морально подготовите себя к неудачам, провалам и всевозможным сложностям, вам будет намного проще развиваться и приступать к новым проектам. Конечно, не могу не повторить уже сотни раз сказанную банальность: учитесь на своих ошибках. Это важно! Учиться, учиться и еще раз учиться Первое время мир разработки выглядит огромным и пугающе неизвестным. Но когда  осваиваешь основные инструменты и получаешь определенный объем практики, начинает казаться, что уже научился всему, что нужно было, ведь работать стало комфортно и легко. Но не забывайте, что индустрия не стоит на месте. И если не развиваться вместе с ней, то однажды можно оказаться невостребованным. А теперь немного практических рекомендаций: Изучите верстку и языки программирования Тем, кто хочет работать во фронтэнде, без верстки никуда. Вам нужно знать HTML и CSS, чтобы располагать и стилизовать главные элементы страниц: текст, изображения, аудио, кнопки, поля для ввода и пр. элементы интерфейса. Главный секрет успешного освоения верстки – это практика. Начинайте верстать отдельные компоненты страниц или их макеты полностью. Читайте руководства, смотрите видео, повторяйте разобранные в них примеры. Чтобы управлять элементами сайта нужен Javascript. Этот язык программирования отвечает за придание веб-страницам интерактивности. Но знаний нативного JS будет мало, поскольку есть еще библиотеки и фреймворки, значительно ускоряющие процесс программирования. Тем не менее, новичкам не стоит гнаться за ускорением. Начинайте в вакууме, не прибегая к помощи дополнительных инструментов, пока работа со стандартным Javascript не станет для вас удобной. Затем приступайте к изучению хотя бы наиболее популярных фреймворков – angular, react и vue – даже несмотря на нелепые обвинения некоторых программистов, называющих использование таких продуктов жульничеством. Если же вы хотите заняться бэкэндом, выбирайте из таких языков, как PHP, NodeJS, C Sharp, Python и Ruby. В этом случае тоже полезно использовать фреймворки и библиотеки для облегчения взаимодействия с серверной частью. Пользуйтесь внешними ресурсами Включайте в работу среды CodePen/JSFiddle. В них вы сможете протестировать код и подсмотреть готовые open-source решения. Потратьте время на поиск других подходящих и эффективных ресурсов для программирования веб-интерфейсов. Вы точно не пожалеете о том, что сделали это, поскольку усилия окупятся с лихвой. Соблюдайте методологию и оставляйте комментарии Придерживайтесь правил одной методологии, найдите свой стиль и соблюдайте его везде – так будет проще и вам, и людям, работающим с вашей программой после вас. А еще обязательно оставляйте в коде комментарии. Даже не сомневайтесь, за уместные и грамотные пояснения вас не только не проклянут, но и сто раз поблагодарят.
14;Как выбрать первыи? язык программирования?;Крайне сложно сделать правильный выбор первого языка. Мы разобрали популярные IT сферы и выявили наиболее подходящие языки, дабы вы понимали вектор дальнейшего движения. На начинающем разработчике большая ответственность и слабое понимание особенностей языков и перспектив от них. Понятно желание сразу начать работу с хорошим языком и не тратить время напрасно. У многих есть страх, что он потратит года жизни бесполезно, а потом знания окажутся ненужными. Сразу хотим успокоить, усилия и полученные знания не будут напрасными. Дальше подробнее объясним почему это правда. В первую очередь стоит присмотреться к рейтингам языков. Существует специальная система PYPL, которая анализирует количество поисковых запросов пользователей при поиске учебников на определённые языки. В сотрудничестве с GitHub они составили рейтинг лучших языков за прошлый год. Если выбор падёт на любой из языков рейтинга, у вас будет работа, обилие подробных материалов по изучению и высокая оплата труда. Лидером среди языков является Java, своё место он удерживает с 2005 года. Если обращать внимание на современные тенденции, наибольший прирост интереса с 2013 года вызывает Python. При этом PHP несколько сбавляет позиции, хотя и не позволяет занять свою позицию языку C#. Также в топе лучших присутствует: JavaScript, C++, Ruby, R, C. Авторитетный рейтинг TIOBE также является достоверным источником для определения уровня популярности языков. Позиции языков в рейтинге существенно изменились. Тем не менее основывать свой выбор лишь на рейтинге нельзя. Бессмысленно начать изучать язык R при желании разрабатывать игровые приложения, ведь он исключительно статистический. Не меньшую важность при выборе языка имеет направленность будущей работы. С этим вопросом также нужно определиться заранее. Рассмотрим популярные сферы программирования и подходящие языки. Веб-разработка. Сюда может относиться разработка различных приложений: социальных сетей, одностраничников, интернет-магазинов и т. п. Внешняя часть (всё, что видит пользователь) в разработке называется front-end. В её основе лежит HTML-разметка, CSS-таблица для указания стилей (положений, цвета, эффектов и т. п.) и JavaScript для придания интерактивности. Back-end является серверной разработкой. Она невидима пользователю и отвечает за взаимодействие внешнего интерфейса с базой данных. Преимущественно работа заключается в извлечении и добавлении информации в базу данных, а также её обработке. При наличии интереса к этой сфере, стоит начать изучать языки для работы с SQL, MySQL, ещё будет полезно знание фреймворка Oracle. Для бекенда подходит Node JS, Java, Ruby, PHP, Python и т. д. Все крупные интернет-проекты совмещают инструменты. Приходится совмещать языки и средства для отладки работы серверов в разных дата-центрах, взаимодействия нескольких серверов. Например, популярная соцсеть ВК использовала транслятор от Facebook под названием HipHop, который преобразовывает PHP в C++, это решение позитивно отражается на скорости работы системы. Несколько позже в ВК создать своё транслятор с названием Kitten PHP. Мобильные приложения. Разработка под мобильные платформы – это трудоёмкий процесс, зато выбор языков несколько уже. Для программирования приложений (не игровых) на платформе iOS используется Objective-C и Swift, преимущественно выбирают второй вариант. Для разработки на Android-платформе стоит выбирать Java, Android Studio, реже используется C++. Ещё есть относительной новый язык Kotlin. На начальном этапе Java является предпочтительным вариантом. Настольные приложения или десктоп. Для создания десктопных приложений под Windows (подобных Skype, TeamSpeaker и остальных) часто используются C++, C# или Java. Они помогают разрабатывать абсолютно все программы, упрощающие выполнение ежедневных задач. Под операционную систему MacOS выбор стоит между теми же Objective-C и Swift. Для целенаправленного программирования под Linux подойдут языки С++ и С. Разработка игр или геймдев. Для разработки игр обычно используют движки. При желании можно начать писать игру с нуля, тогда список языков останется прежним (аналогично прошлому разделу). Если ориентироваться на работу с движками, выбор стоит между двумя распространёнными: Unreal Engine и Unity. Есть ещё GameMaker Studio, он прост в изучении и идеально подходит для разработки без изучения программирования. Правда, GameMaker Studio помогает делать только двумерные игры, зато они будут работать на большинстве платформ. Чтобы стать востребованным гейм-программистом, лучше выбирать Unity и Unreal Engine. Для разработки больших проектов с открытым миром и огромным количеством возможностей Unreal Engine является лучшим выбором. Чтобы начать работать на нём, нужно понимать движок и изучить С++ для работы со скриптами. Для лёгких, малобюджетных проектов лучше брать Unity. Для его работы придётся углубиться в работу движка и начать изучение C# или JavaScript. Большие данные. Сегодня существует огромное количество данных, полученных из средств массовой информации и соцсетей. Всё большее количество компаний задумываются о способах эффективного использования информации, скопившейся за десятилетие на хранилищах серверов. С помощью Big Data, удаётся проанализировать способ взаимодействия с ресурсами, поведение пользователей, смоделировать поведение в различных ситуациях и сделать правильный прогноз. В России лишь начал формироваться рынок Big Data, но банковские системы, телекоммуникационные гиганты уже всерьёз задумываются над применением этих технологий. В связи с этим начала появляться специальность дата-аналитик. Язык R специально создан для работы с огромными объёмами информации. В этой сфере ещё могут применяться Scala, Python, C, Java.
15;Какие языки программирования самые высокооплачиваемые на 2022 год: ТОП;Одна из лучших площадок с вакансиями для разработчиков Devjobsscanner составила свой ТОП-10 самых высокооплачиваемых языков программирования на 2022 год. JavaScript. Последним в ТОПе оказался язык JS. Он до сих пор востребован как в фронтенд, так и бекенд разработке. В ближайшее время его популярность вряд ли себя исчерпает, но вот профессионалов, которые знают этот язык от и до – совсем не много. Ввиду сложностей на этапе обучения и необходимости освоения фундаментальных знаний, хорошие JavaScript разработчики – навес золота. Именно поэтому работодатели готовы платить от 8 750 до 29 000 долларов в месяц толковому специалисту. Следовательно, в среднем за год JavaScript разработчик может заработать от 105 000 до 350 000 долларов. Java. Еще один непростой в изучении, но очень важный в мире IT язык – Java. Да, разработчикам нужно пройти сложный путь для освоения всех тонкостей этого старичка, но это полностью оправданно, особенно если приплюсовать владение фреймворком Spring. Так, компании выплачивают порядка 8900 – 30 000 долларов в месяц за работу специалиста, а значит в год реально получить от 107 000 до 300 000 долларов. С/С++. Эти два нафталина также продолжают быть актуальными, а профессионализм специалистов, которые ими обладают, оценивают в среднем в 9 000 - 29 000 долларов в месяц. С и С++ дос их пор используют почти повсеместно, но особую любовь они заслужили в прикладных программах. За год работы можно получить минимум 109 000 – 330 000 долларов. Swift. Если вы хотите создавать крутые проекты для iOS – самое время учить Swift. Этот язык не только высокооплачиваемый, но и удобный для работы. Пользователей яблока становится больше с каждой минутой, поэтому можете не переживать об актуальности своей профессии в ближайшие лет 50 минимум. За месяц, работая со Swift можно получить от 9 500 до 19 000 долларов. Python. По праву один из самых топовых языков – Python принесет специалисту, владеющему им, порядка 114 000 – 480 000 долларов в год. С его помощью можно разрабатывать практически все, что разрабатывается от веб-приложений до ИИ. Да, знаний для работы потребуется очень много, т.к. Phyton наполнен множеством библиотек и фреймворков, но он точно того стоит. GO. Google тоже представил свой язык программирования GO. Но он удобен для работы не только с самой мощной поисковой системой. Язык прост, отвечает многим правилам безопасности данных, отличается простым скриптом и высокой производительностью. Да, он до сих пор тесно связан с С, но это не мешает ему быть в пятерке лидеров этого списка, ведь он может принести профессионалу до 360 000 долларов в год. Ruby. Знания языка веб-разработки Ruby все также требуются во многих вакансиях. Благодаря своей многофункциональности и взаимосвязи с Ruby on Rails, его использует в разработке огромное количество компаний по всему миру. Профессионалы, которые действительно владеют этим языком, могут рассчитывать на средний доход 10 300 долларов в месяц с максимальным ростом до 25 000. Scala. Успешное комбинирование основ ООП и функционального программирования, широкий выбор удобных библиотек и большое количество почитателей, которые продолжают совершенствовать возможности языка – все это Scala. Да, специалистов, которые имеют глубокие знания в нем немного. Но должность очень востребована на рынке, поэтому – не тратьте время зря. Для дополнительной мотивации средняя ставка профессионала за 1 месяц – 10 800 – 33 000 долларов. Rust. Мультипарадигменный язык Rust все больше стал использоваться в реализации проектов разного уровня и масштаба. С его помощью можно разработать ПО с высокой производительностью и гарантированной безопасной работой. Он чем-то схож с С/С++. Но в отличие от них, Rust имеет более обширный функционал и отлично защищает данные при помощи механизма контроля ссылок. За отличное владение этим языком полагается высокий заработок – 12 000 – 42 000 долларов в месяц. Solidity. Лидером ТОПа стал еще малоизвестный язык программирования, который применяется для реализации всего жизненного пути контрактов для платформы Ethereum. Так как криптомир имеет особое место в сегодняшних реалиях и для работы с ним требуется как можно больше технологий, Solidity максимально уместен для изучения. Профессионалов, которые им владеют очень мало, поэтому конкуренции, пока, фактически нет. Со знанием этого языка программирования удастся не только реализовывать группы блокчейнов, которые как-то взаимосвязаны друг с другом, но и зарабатывать в месяц в среднем 12 500 долларов, а максимум – 83 000. А значит в год с его помощью можно максимально получить целый 1 000 000 долларов.
16;Будущее уже сегодня: технологии, которые меняют мир;Технологический прорыв не перестает будоражить воображение. Сегодня уже доступны технологии, которые меняют наше настоящее. Дополненная реальность. Самое примитивное использование AR нашло себя в известных всем фильтрах. SnapChat, Instagram и пр. предлагают примерить забавные мордочки или изменить свою внешность, что пользуется невообразимой популярностью. Но это далеко не единственное применение технологии дополненной реальности. Сегодня ей нашли применение на дороге, для обеспечения безопасности всех участников движения. Проект Wayray подразумевает включение подсветки на знаках дорожного движения, пешеходах и различных препятствиях в условиях неудовлетворительного освещения. Теперь управление транспортным средством станет более удобным и безопасным. Интернет вещей. IoT обеспечивает максимальный комфорт и удобство как для потребителей, так и для владельцев бизнеса. Технология представляет собой возможность взаимодействия объектов и устройств с внешней средой и между собой. Например, счетчики электроэнергии автоматически могут передавать показатели в расчетный счет компании. Сегодня интернет вещей используется в промышленности, продажах и различных других сферах жизни человека, упрощая ее. Беспроводная подзарядка. На данный момент популяризированы беспроводные подзарядки для дронов, электромашин, электровелосипедов и электросамокатов, а также других технологичных устройств. Но сегодня уже создан прототип смартфона, который заряжается только от сети Wi-Fi и не имеет аккумуляторной батареи. Его производителями стали ученые из Вашингтонского университета. Благодаря такой разработке, можно будет поставлять электроснабжение даже в самые отдаленные уголки нашей планеты без необходимости установки и обслуживания дорогостоящих проводных сетей. Вертикальные фермы. Во многих уголках Земли наблюдается большая проблема с продовольственными угодьями и выращиванием различных культур для общего потребления. Благодаря созданию вертикальных ферм, удалось решить эту проблему в некоторых регионах, например, Сингапуре, Японии и прочих островных территориях. Теперь вопрос с дефицитом земли для земледелия будет решаться достаточно быстро. Энергосберегающие кирпичи. Даже в мир архитектуры удалось внедрить высокие технологии. Так, американские ученые изобрели кирпичи со свойствами суперконденсатора. Теперь они способны получать и отдавать энергию. Ее накопление происходит довольно быстро, но не сохраняется на продолжительное время, как, например, в обычном аккумуляторе. Для обработки кирпичей используется специальный реагент, который наносится при высокой температуре. Поверх также производится покрытие эпоксидной смолой. Теперь кирпичи можно подключить по сути к любому источнику питания и использовать для различных целей, даже для освещения комнаты. На данный момент 60 кирпичей способны питать энергосберегающую лампочку только 60 минут, но технологию продолжают развивать и, возможно, скоро удастся надолго пролонгировать данный эффект. Роботы-помощники. Сегодня роботы-помощники активно используются в различных сферах нашей жизни: медицине, промышленности, быту, торговле и пр. Например, им доверяют ведение экскурсий в музеях, работу на складах, сбор урожая, сортировку продуктов и разминирование. Они стали неотъемлемой частью способной эффективно справляться с элементарными задачами и облегчать нашу жизнь. Многих из них могут позволить себе даже обычные люди со средним достатком. Это настоящий рывок в более удобное будущее для каждого из нас, где будет еще больше времени для саморазвития и отдыха.
17;С# разработчик: кто это, и что он делает?;"С# является универсальным ЯП, используемым для создания продуктов разного направления. Так как это детище Microsoft, которое применялось в реализации бесчисленного количества софта. До сих пор продолжает совершенствоваться, С# еще длительное время будет актуален в мире разработки. Это гарантирует востребованность специалистов, которые используют его в работе. Предлагаем подробнее поговорим об этой профессии. И хотя язык С# изначально использовался только для проектов Windows, сегодня он нашел применение в гейм-деве, веб-разработке, реализации стационарных приложений и облачных сервисов. По сути, его можно использовать даже для графики метавселенной. Программисты С# могут работать в одной из этих сфер или совмещать свои умения использования языка для задач разной направленности. В зависимости от того, какой уровень профессионализма у разработчика, он будет выполнять разный фронт задач. Чаще всего список включает в себя: подбор наиболее подходящий технологических решений; проведение тестирования ПО на разных этапах его создания; поиск и исправление возможных ошибок; выведение продукта на рынок и дальнейшее внедрение обновлений; постоянная коммуникация внутри команды и со смежными специалистами; ведение технической документации и отчетов. Это лишь часть обязанностей, с которой могут столкнуть джуны и мидлы. А вот сеньорам следует быть готовыми к управлению целой командой С# разработчиков и смежных специалистов. Их задачами также будут: распределение задач между сотрудниками, общение с руководством и заказчиком, ведение всей документации и глобальная ответственность за весь проект. Требования к разработчикам С#. Для работы с С# недостаточно изучить только один язык. Да, его нужно знать в совершенстве и постоянно следить за новыми тенденциями и обновлениями, но для работы понадобятся и другие навыки: владение минимум еще одним программирования – C++, Java или JS; понимание основ веб-дизайна и программной архитектуры; отличное владение Git или другими системами управления версиями; умение работать с системами поиска ошибок; глубокие знания платформы .NET Framework; понимание методологий управления проектами Agile, инфраструктуры ASP.NET и SQL Server. Также большим плюсом будет навык работы с инструментами автоматизации процессов. Личные качества. Работа в разработке продуктов на основе С#, как большинство профессий в сфере IT – это про монотонное выполнение рутинных задач, что требует от специалиста повышенного терпения и внимательности. Кроме того, важны и другие личные качества: стрессоустойчивость; навыки делового общения; умение быстро принимать важные решения; отличные навыки тайм-менеджмента; умение быть частью целого живого механизма; максимальная нацеленность на результат. На плечах разработчика С# лежит огромная ответственность за ведение проекта. Он часто отвечает за конечный результат, что требует от него высокого уровня профессионализма и лаконичного сочетания технических и личностных качеств. Плюсы и минусы работы с C#. Если спросить любого разработчика С# о плюсах работы в этой сфере, он сразу сможет акцентировать внимание на следующих преимуществах: относительно легкий путь обучения, особенно если есть знания С++ или Java; высокий уровень зарплаты; востребованность профессии на рынке; постоянная поддержка языка и внедрение новшеств со стороны Microsoft; возможность работать в удаленном режиме. Но есть и минусы, хоть они не столь значительны, мы все же их осветим: повышенные требования к качеству конечного продукта; сидячий образ жизни; повышенный уровень стресса в работе. Как стать разработчиком C#. Для того чтобы освоить язык программирования C# можно заняться самообразованием, получить специальность в университете или изучать его на курсах. Какой вариант получения знаний лучше, судить стоит только исходя из личных предпочтений. Так, обучаясь самостоятельно очень нужна самодисциплина и постоянное изучение большого количества литературы и информационных платформ. Получение образования в университете займет минимум 4 года. При этом в обоих случаях потребуется дополнительно искать пути для получения практических знаний и навыков. А онлайн-курсы стали настолько популярны и богаты на теоретические и практические знания, что пожалуй являются лучшим вариантом для изучения С#. Они занимают не так много времени и дают возможность сравнительно быстро охватить большой плац материала. Главное найти действительно стоящий вариант курсовой программы. Программа обучения. Также хотим отметить, что если вас интересует углубленное изучение языка и его фреймворков, то предлагаем вашему внимаю наш полный курс по изучению C#. За курс вы изучите язык C#, научитесь делать веб проекты на основе ASP NET и строить приложения при помощи WinForms и WPF. В программе обучения вы с нуля научитесь разрабатывать проекты на языке C# из разных сфер. По итогу вы разработаете интернет магазин, программу блокнот, программу для получения погоды, приложение на компьютер для покупки вещей и многое другое."
18;Бесплатные игры для оттачивания навыков работы с Python: ТОП-4;"Любое обучение начинается с теории: книги, лекции, руководства и другие учебные пособия – дают нам надежный базис знаний. Зачастую его не достаточно, чтобы взять и приступить к работе – нужна практика. Использование интерактивных игр в процессе обучения Python – отличный способ закрепить теорию и попрактиковать навыки, а также помочь мозгу лучше усвоить информацию. Порадуйте себя полезной и увлекательной игрой, мотивирующей вас проходить новые уровни и получать знания с приятным бонусом в виде награды. Сегодня мы разберем 4 бесплатных игры для оттачивания навыков работы с Python. В них вы найдете сотни уровней, миссий и заданий. Отметим, некоторые из них требуют базовых знаний языка программирования и опыта работы с ним. CodeCombat. CodeCombat – это ролевая компьютерная игра, содержащая огромную базу курсов и позволяющая освоить несколько главных концепций Python. Например, объекты, переменные, сравнение строк и пр. Суть игры: прохождение уровней по одному или нескольким типам разработки, прописывание кода и параллельное изучение главных концепций Python. РПГ оснащена первоклассным пользовательским интерфейсом, удобным геймплеем и изумительной графикой. Игра станет отличным мотиватором к изучению языка программирования. Чтобы начать играть – зайдите на сайт CodeCombat и выберите “I’m a student”. Если у вас нет кода класса и аккаунта выберите второй пункт во всплывающем окне. При желании, вы в любой момент можете пройти регистрацию, для расширения возможностей взаимодействия с игрой. CheckiO. CheckiO насчитывает более чем 500 миссий. Все они переплетены с разными темами Python. Доступны 3 уровня сложности для всех категорий участников. Начинающим программистам подойдут простые задания, для повышения уровня знаний, а продвинутым разработчикам – сложные, направленные на совершенствование навыков владения Python. Для удобства каждое задание имеет инструкцию и варианты решения. Когда вы решите задачу, вы сможете оценить результаты других участников и посмотреть, как они пришли к ответу. Эта особенность игры направлена на повышение эффективности решения задач, т.е. после оценки других способов получения ответа, каждый сможет выбрать для себя более оптимальный способ. Во время игры вам предложат выбрать уровень сложности: начальный, нормальный или продвинутый. После выбора откроется карта миссий, которую необходимо пройти. Например, начальный уровень включает задания по типу: первое слово, оптимальный пароль, основное предложение и пр. Чтобы начать игру, перейдите на сайт CheckiO и нажмите “Start new Game”. Далее выберите один из уровней, а затем либо нажмите “start without registration”, либо зарегистрируйтесь в системе, чтобы получить возможность сохранять свои результаты. Codewars. Codewars – универсальная игра для большинства языков программирования. С ней вы повысите скилл не только в работе с Python, но и научитесь правильно составлять коды для разных SQL, JavaScript, C++ и пр. Игра прокачает ваше мастерство в составлении кода до максимума, но сначала придется пройти немало испытаний. Вся система построена на kata – практических заданиях, способствующих улучшению техники и навыков в написании кода. Так, чтобы прокачать скилл, придется выполнить столько kata, сколько соответствует хотя бы текущему уровню ваших знаний. Доступны задания для всех типов игроков: изучающих программирование; разработчиков, которые делают первые шаги в программировании; специалистов среднего уровня; профи. После завершения задания, вам будут предложены другие альтернативные варианты его решения. Это также поможет найти для себя нечто новое и полезное для работы. Также доступен чат для живого общения и возможности поделиться навыками. А для тех кто хочет отточить мастерство в определенном профиле, доступно создание персонального kata с нуля. Чтобы начать игру, достаточно перейти на сайт Codewars, пройти к регистрации и выбрать Python или любой другой язык для адаптации kata под него. Перед тем, как допустить вас к регистрации, сервис отправит первое задание. Решив его, вы сможете завершить создание учетной записи и продолжить играть. Чтобы не проходить регистрацию, вы можете зайти в систему при помощи учетной записи Github. Code Monkey. Несмотря на то, что Code Monkey – это игра для детей, она станет отличным стартом для всех начинающих программистов. Кроме того, если вы только начали изучать Python, простые задания позволят подкрепить теорию легкими практическими упражнениями. Для новичков игра предлагает мини-курс “Trivia ChatBot”. Он включает основные понятия Python и способствует их закреплению. В целом игра наполнена привлекательной анимацией, несколькими уровнями сложности, как для начинающих, так и для продвинутых разработчиков, а также увлекательными интерактивными играми. Единственный минус – бесплатный доступ открыт только 14 дней, далее придется покупать одну из предложенных подписок. С ней откроется доступ к определенным играм и действиям. Чтобы начать, следует перейти на сайт Code Monkey и кликнуть на “start for free”. Далее будут предложены различные опции для выбора, следуйте по ним и выбирайте оптимальный путь, а также не забудьте указать свой возраст."
19;Что такое UX и UI? Описание и обзор отличий;Неверное употребление терминов UI и UX выдает слабую подготовленность претендента на рабочее место, вводит в заблуждение собеседника при общении на профессиональные темы. В среде дизайнеров часто можно слышать термины UI и UX. Также от их обилия пестреют объявления о поиске сотрудников в области дизайна. Однако даже среди опытных дизайнеров встречаются люди, которые или путают эти понятия, или не вполне точно представляют их значение, воспринимая их как одно целое. Но это ошибочное представление. Чтобы устранить путаницу в понятиях, ниже рассмотрим, что же такое на самом деле UI и UX, для чего эти термины используются и какая между ними взаимосвязь. Что такое UX? UX – это аббревиатура словосочетания на английском языке User Experience, которое переводится как «пользовательский опыт». С точки зрения поведенческого маркетинга. Пользовательский опыт – это совокупность впечатлений потребителя от пользования определенным продуктом, материальным или нематериальным, сервисом или услугой. Задача UX-дизайна – создать продукт, сервис или услугу таким образом, чтобы эта совокупность впечатлений была благоприятной и формировала лояльность к повторному взаимодействию. Основными чертами объекта, способствующими достижению этой цели, являются полезность, простота и легкость в использовании. В широком понимании UX-дизайнер должен, не выходя за рамки обусловленной технологической платформы и функциональности, придать продукту, услуге или сервису черты user friendly. Другими словами, система взаимодействия с пользователем должна выполнять свои функции и в то же время быть легкой в использовании, простой и интуитивно понятной. В области IT-технологий задача UX-дизайнера заключается в том, чтобы пользователь, открыв сайт, приложение или программу, смог быстро и без затруднений реализовать алгоритм взаимодействия с продуктом. UX-дизайнер может использовать несколько инструментов, чтобы улучшить пользовательский опыт. Профилирование пользователей (User Profiling) - это изучение личных данных пользователей продукта и их сегментация по признакам пола, возраста, региона или страны проживания, языка и т.п. Построение удобной информационной структуры продукта. Исследование поведения пользователей. Что делает посетитель при переходе на страницу? Сколько времени он проводит на сайте? Каковы страницы выхода? Сколько времени проходит до достижения цели (нажать кнопку «купить», перейти в форму заказа и т.д.). Изучение удобства использования продукта. Удобно ли работать с сайтом или приложением при слабом уровне сигнала сети Интернет? Как работают уведомления или рассылки? Оптимизация контента. Информация должна быть полезна пользователю и отвечать его запросам. Изложение информации должно быть удобным для восприятия. Подводя итог, можно утверждать, что цель UX-дизайна – сделать использование продукта удобным для пользователя. Что такое UI. Аббревиатура UI расшифровывается как User Inerface, что в переводе с английского означает «пользовательский интерфейс». Это понятие означает систему коммуникации между человеком и продуктом. Если UX-дизайн определяет систему и пути взаимодействия продукта и пользователя, то задача дизайнера UI – выразить решения UX-дизайна понятным человеку способом. Эта задача при создании сайтов и приложений решается путем создания эстетичного дизайна интерфейса продукта. Для этого используют несколько путей. Правильное формирование визуального восприятия. Определение визуальных форм, которые способствуют выполнению задачи, возложенной на страницу. Создание графического сопровождения. Наполнение контента графическим и иллюстративным материалом, соответствующему смыслу и стилистике его содержания. Создание визуальной преемственности и универсальности. Определение алгоритма и последовательности использования графических и визуальных приемов. Если действия UX-дизайнера во многом определяются технологическими возможностями, функциональностью продукта и потребительскими предпочтениями, то создатель пользовательского интерфейса имеет больший простор для творчества. Справедливости ради нужно отметить, что UI-дизайн также имеет свои определенные правила и ограничения. Почему различают UI и UX. Если говорить образно, UI – это органы управления автомобилем и их отделка, а UX – это система гидравлического усиления руля, реакция педали газа и тормоза, скорость переключения передач и т.п. Если UX-дизайнер определяет, как будет работать консоль, то UI-дизайнер решает, как она будет выглядеть. Очевидно, что UX и UI взаимосвязаны, однако находятся в иерархически выстроенной структуре. UI является неотъемлемой частью UХ. О том, что разница между терминами существенна, говорит тот факт, что самая совершенная система не будет способствовать улучшению пользовательского опыта, если она будет иметь неприятный интерфейс. С другой стороны, существование минималистичного дизайна подтверждает важность хорошей проработки системы взаимодействия в целом. До эпохи бурного развития технологий решение этих двух взаимосвязанных задач возлагалось, как правило, на одного человека. С усложнением коммуникативных форм появилась потребность в более узких специалистах. Поэтому в создании современных продуктов принимают участие не только UX- и UI-дизайнеры, но и копирайтеры, иллюстраторы, графические дизайнеры, технологи и т.д.
20;Принцип работы сканера отпечатка пальца;Это одна из самых удобных технологий, но, как оказывается, не всегда безопасная. В статье расскажем, как работает распознавание отпечатков, и почему обыкновенный пароль все-таки надежнее. Весь секрет в минуциях. Принцип действия сканера отпечатков пальцев строится на анализе минуций. Это участки узора, в которых линии изменяются, например: обрываются, завершаются и снова начинаются, делают резкий поворот, сходятся, раздваиваются, скручиваются петлями и пр. Наши отпечатки являются уникальными именно благодаря минуциям. Так что основная задача сканера – максимально точно считать их. Как распознаются данные. Когда технология только появилась, сканеры фотографировали палец и затем сравнивали его с имеющимися в памяти изображениями. Главной проблемой было то, что если палец приложить на 0,5 см ниже или выше положения первоначального сканирования, распознавание не срабатывало. Еще один минус визуального распознавания – к такому сканеру можно просто приложить фото отпечатка и тем самым легко его обмануть. Ведь технология получит такое же изображение, как на контрольном образце, и откроет доступ. Поэтому оптические сканеры не могут обеспечить серьезную защиту и используются довольно редко. Современные сканеры анализируют не общий вид линий, а минуции. Теперь они работают так: Делают скан приложенного пальца. Обнаруживают и выделяют минуции. Информацию о взаимном расположений минуций кодируют и формируют из нее цифровую матрицу. Сравнивают полученную матрицу с теми, которые хранятся в базе данных. Если процент совпадений выше установленного значения – отпечаток принимается и открывает доступ к смартфону. Виды сканеров отпечатков пальцев. Есть 4 разновидности: Оптические — находятся под экраном. Современные OLED-матрицы пропускают свет с двух сторон, чем и пользуются производители, чтобы разместить обычный оптический сканер непосредственно под экраном. Он банально делает фото (к тому же плохого качества из-за помех в виде пикселей матрицы), поэтому часто ошибается, долго “думает” и срабатывает на любой муляж, к примеру, на скотче, пленке и т.п. Оптические бесконтактные. Более совершенная модель оптических сканеров. В этом случае палец прикладывается не к сканеру, а к стеклу, под которым несколько камер делают снимки с разных сторон. Фотографией его обмануть уже невозможно, ведь камеры создают стереоизображение. Теоретически, обойти защиту можно только с помощью изготовленной 3D-модели пальца. Ёмкостные. Первые датчики отпечатков в смартфонах были именно такими, и их разновидности продолжают использоваться производителями. Принцип действия: поверхность сканера покрыта густой сетью миниатюрных полупроводников. Когда к ним прикладываешь подушечку пальца, выступающие линии воздействуют на проводники, в результате чего емкость цепи изменяется. По этим изменениям и формируется цифровая картина отпечатка. Недостатки ёмкостного сканера: Если пальцы влажные, капли воды приводят к замыканию лишних датчиков и мешают правильному распознаванию. Этот датчик тоже легко обмануть с помощью 3D-принтера. Ультразвуковые. Сейчас это самый передовой и надежный вариант, потому что такие сканеры собирают информацию не только о минуциях, но и пульсе, а также строят объемную модель линий для большей точности результата. Из-за высокой стоимости они еще не получили широкого распространения: ультразвуковыми сканерами оснащены лишь несколько моделей Samsung. Отпечаток vs пароль: что лучше? Ответ зависит от ваших приоритетов. Если вам важнее быстрота и удобство, пользуйтесь сканером. Этот вариант прекрасно подойдет, если в вашем телефоне или ноутбуке нет ничего сверхсекретного и сверхценного. Отпечатка пальца будет достаточно и в качестве защиты устройства от ребенка. В другом случае рекомендуем использовать пароль, потому что сканер можно обмануть десятком способов, а обойти пароль только двумя: взломать или подглядеть. Если придумать достаточно сложную комбинацию и убедиться, что во время ввода за вами никто не следит, то взломать этот пароль будет крайне тяжело.
21;Какие языки используют для приложений Android: детальный обзор;Операционная система Android все также занимает бОльшую часть рынка, что автоматически делает разработчиков, которые создают для нее приложения, востребованными и высокооплачиваемыми специалистами. Начинающих программистов всегда мучает вопрос “какой язык программирования учить, чтобы создавать приложения для Android?” И сейчас мы на него ответим. Какой язык основной для создания приложений Android? Порядка 90% приложений, представленных на Play Market, разработаны на языке программирования Java. Это абсолютно оправдано, т.к. этот язык долгое время был основным для ОС Android и в общем используется повсеместно для создания различных продуктов. Еще несколько лет назад он был на первом месте по популярности и востребованности использования среди остальных. Да, другим языкам пока не светит переплюнуть его по частоте использования для приложений Android. Но сегодня все чаще начинают использоваться и другие из них. Со знаниями Java можно реализовать себя и в других сферах IT, а также в любой момент изменить спецификацию, начав изучать другие языки программирования. Несмотря на сложность его изучения, как первого языка в жизни программиста, он стоит этих усилий. Плюс сегодня вы найдете множество возможностей для более легкого освоения Java, чем даже несколько лет назад. В интернете огромное количество лайфхаков по его использованию, подсказок, литературы и бесплатных курсов. Альтернативные языки для работы с приложениями Android. Kotlin – это второй базовый язык программирования для создания приложений Android. Для работы с последними лучше использовать один из них, особенно, если вы только начинаете свой путь в программировании. Kotlin более легкий как в изучении, так и в работе, что и позволяет ему стремительно набирать популярность. Python – используется повсеместно и в принципе является самым популярным языком программирования на сегодняшний день. Несмотря на то, что его используют в других сферах, для создания Android приложений он также приспособлен. И пусть его в этой сфере используют крайне редко, если вы хотите взаимодействовать именно с ним – вперед. Только применяйте для этого пару инструментов – библиотеку Kivy и набор инструментов/библиотек BeeWare. С/С++ – эти языки отлично подойдут для грузных приложений в любой среде, в том числе и Android. Благодаря своей высокой производительности, они помогут сделать отличный продукт. Но использовать их от начала и до конца разработки вряд ли получится. Скорее всего придется заручиться поддержкой Java. JavaScript – подходит для создания полного жизненного цикла мобильного приложения, но при условии отличного владения React Native и использования его в работе. Dart – альтернатива JavaScript, которая создала свой дополнительный инструмент, позволяющий с его помощью создавать продукты для Android. Его именуют Flutter. Он представлен целым комплексом приспособлений, который в целом подходит для работы. Lua – язык также обзавелся своей платформой для разработки приложений под названием Corona SDK. Он также позволит заниматься реализацией Android продуктов.
22;Who is who в data science: разбираемся в тонкостях профессии;Часто data scientist воспринимают как представителей одной профессии. Но ведь в этой сфере есть много разных специализаций! Давайте выясним, какие все-таки существуют направления и как их изучать. Чтобы попасть в мир науки о данных, вам нужно хорошо знать универсальные базовые вещи, и только потом выбрать узкую специализацию для дальнейшего более глубокого изучения. Сейчас мы с вами попробуем обрисовать примерный круг основных направлений, чтобы вы могли в них ориентироваться. Потому что для удачного трудоустройства нужно хорошо понимать, какие возможности предлагает рынок труда, на какую должность вы хотите претендовать и какими навыками должны для этого обладать. Состав команды. Данные проходят через сложную многоэтапную обработку, прежде чем лицо, принимающее решения, увидит их в форме красивой, структурированной и понятной презентации. Специализации мы расположили в том же порядке, в котором они взаимодействуют с данными. Итак, самые распространенные вакансии: Data architect. Что понимается под архитектурой данных? Это все правила, модели, техники и стандарты, которые определяют вид, применение и хранение собранной информации. Сюда же относится интеграция данных внутри организации и вопросы безопасности. Все эти задачи находятся в зоне ответственности архитектора данных. Если дело касается big data, без этого специалиста никак не обойтись. В крупных компаниях он часто играет и роль дата-инженера. Классические задачи: составление детального плана работы с данными,  предоставление нужных инструментов для data engineer. Что необходимо знать: SQL, noSQL, XML, Hive, Pig, Hadoop, Spark, машинное обучение, визуализацию, моделирование и хранение данных, а также ETL (extraction transformation and loan). Data engineer. Инженеру не обязательно знать статистику и machine learning. Но это все равно очень важный член любой команды в data science. Без инженеров не будет никаких данных, а значит и материала для работы, и даже самой отрасли. Классические  задачи: получение данных, все виды обработки информации, а также ее хранение. Создание, тестирование и изменение ИТ-инфраструктуры. Приведение в действие всех проектов дата-архитектора, благодаря чему у дата-сайентист появляется доступ к данным и возможность запускать собственные алгоритмы. Требования к знаниям: отличные навыки программирования, владение SQL, пакетом Matlab, языками C++, Python и Perl, а также Java и Ruby, ходовыми инструментами API и средствами ETL и пр. Data analyst. Специальность, очень похожая на предыдущую, поэтому их часто не различают. Тем не менее, data analyst – менее технический персонаж. Классические  задачи: поиск ответов на вопросы команды, анализ данных, их визуализация и составление отчетов, презентаций. Этот специалист не занимается поиском новых тенденций и прогнозами. Требования к знаниям: статистика, методы визуализации данных, программирование на среднем уровне (Python, R) понимание SQL-запросов, владение MS Excel и другими подобными инструментами. Data scientist. Так как роли в data science не имеют четких разграничений, есть довольно много компаний, которые стремятся найти себе т.н. «единорогов». Единорогами называют специалистов, прекрасно разбирающихся практически во всем: начиная математикой и заканчивая визуализацией, машинным обучением и бизнес-менеджментом. Конечно, такие люди существуют, но их совсем мало. Обыкновенный дата-сайентист – это тот же аналитик, просто чуть глубже погруженный в математические науки. Он обладает большей свободой для экспериментов и может исследовать тренды, находящиеся вне поля зрения менеджмента. Дата-сайентист проходит через огромное поле неструктурированных данных, чтобы найти в нем информацию, в которой заложены необходимые правильные ответы. При этом очень важно понимать бизнес-задачи. А еще этот специалист делает предиктивный анализ, что и отличает его от data analyst. Не зря же он scientist: этот человек занимается научными исследованиями, а именно тестирует гипотезы, чтобы получить практические знания. Классические задачи: переработка данных, машинное обучение, оценивание результатов и визуализация этой оценки, формирование предсказаний и отчетов. Пример типичной задачи – предсказать, какова вероятность, что клиент откажется от подписки (группировка клиентов на смысловые группы). Требования к знаниям: навыки data analyst и хорошая база знаний в сфере машинного обучения, статистика, умение давать оценку статистическим моделям, программирование на продвинутом уровне. Machine Learning Engineer. По сути, это дата-сайентист, который специализируется на machine learning. Классические задачи: ПО для автоматизации систем и моделей ML, их проектирование, создание и тестирование, а также последующая поддержка. Требования к знаниям: статистика, хорошие математические навыки, из языков – Java, Python и JavaScript, ходовые фреймворки машинного обучения, Hadoop или его аналоги. Business Intelligence Developer (BI-разработчик). Главная задача этих специалистов – структурировать и презентовать полученные данные так, чтобы они были понятны для менеджмента. Как правило, анализ не входит в число их обязанностей. Технический бэкграунд BI-разработчикам не требуется, так как в этом направлении необходимо в первую очередь хорошо понимать бизнес-операции и эффективную коммуникацию. Классические задачи: вырабатывание стратегий для других специалистов, как эффективно использовать информацию и как вовремя получать ее, чтобы принимать требуемые решения. Кроме того BI-разработчик создает проекты и хранилища, поддерживает их, разрабатывает пакеты ETL, dashboard, аналитические отчеты. Требования к знаниям: SQL, способы хранения данных, SSRS-SSAS-SSIS, методы ETL, построитель отчетов Report Builder, Microsoft Power BI, язык запросов DAX, MS Excel/Tableau, основы безопасности, дашборды и такие языки программирования, как VB, C# и JavaScript. Database administrator. За готовой базой данных кто-то должен присматривать. Этот специалист занимается тем, что выявляет неисправности, быстро находит выход в экстренных случаях и решает все проблемы, связанные с работой с данными. Классические задачи: выполнение резервного копирования информации, ее восстановление, обеспечение безопасности, а также моделирование. Этот специалист следит, чтобы все сотрудники имели нужные доступы, система корректно работала и все версии баз данных были связаны друг с другом. Требования к знаниям: языки БД и ЯП, с которыми работают в конкретной организации, облачные сервисы.
23;Как происходит взлом сайта? Как от него защититься?;"Наверняка вы не раз слышали новости об утечках пользовательских данных, взломанных приложениях и успешных атаках на сервера. Но как это делается и как защититься? Почему так происходит, что одни компании постоянно взламывают, а у других с этим нет никаких проблем? Давайте разберемся, по каким принципам действуют хакеры и как можно от них обезопаситься. Алгоритм взлома. Запомните главный факт – систем, которые было бы невозможно взломать, не существует. Дело только в том, как много времени это займет. Поэтому вам нужно сделать защиту такой, чтобы ее обход был слишком долгим, а это будет значить, что нападать на ваш сайт попросту невыгодно. Типичный алгоритм взлома выглядит так: попытка получить доступ, не прибегая к взлому; применить все известные методы взлома; прибегнуть к грубой силе; разработать собственный инструмент; придумать другой подход и начать алгоритм сначала. Чтобы было понятнее, давайте вместе детально разберем каждый шаг взломщика и посмотрим, каким образом он действует на всех этапах. Цель взлома. Допустим, хакеру нужно получить доступ к сайту с аккаунта любого пользователя. Шаг №1: социальная инженерия. Наилучший взлом – не случившийся. Но как без взлома заполучить доступ к сайту? Конечно же, нужно склонить пользователя к тому, чтобы он сам дал вам свои данные для входа. Этот способ называется социальной инженерией, и вот какие существуют ее разновидности: Сообщения от администрации. Пишем пользователю письмо от имени якобы официального представителя сайта. Примерное содержание: Получив такое сообщение, человек сразу начинает паниковать. Но если отбросить эмоции и прислушаться к здравому смыслу, сразу становится виден почерк мошенников. Ненавязчивое общение. Ни с того ни с сего вам начинает писать какой-то человек, желающий познакомиться. Завязывается дружеское общение, в ходе которого он расспрашивает вас обо всяких мелочах: откуда вы родом, какое у вас хобби, каких животных любите, какая у вашей матери девичья фамилия… Догадались, к чему все идет? Конечно же, к тому, чтобы узнать кодовое слово, с помощью которого можно будет получить доступ к вашему профилю. Фишинг. Вам приходит письмо с просьбой перейти по ссылке и, например, проголосовать или посмотреть что-то интересное. Вы открываете ее и видите форму для авторизации. Заполняете ее своими данными, но дальше не происходит ровным счетом ничего. Вы в недоумении закрываете сайт, но хакер уже успел получить все, что ему было нужно. Сайт, который вы посетили, был подставным: он скорее всего будет выполнен в том же дизайне, как настоящий, но на самом деле это муляж, который нужен для сбора ваших данных. Как защититься? Единственный способ – это информирование пользователей. Регулярно напоминайте им, что: представители сайта не запрашивают персональные данные для входа в аккаунт; одноразовые пароли, как и кодовые слова или ответы на контрольные вопросы, нельзя сообщать третьим лицам; нельзя переходить по рекламным и прочим ссылкам (особенно оставленным в комментариях к статьям или отправленным в сообщениях), и авторизоваться на этих сайтах. Если в пользовательский аккаунт пытаются зайти с другого устройства, вам нужно убедиться, что попытку авторизации делает именно пользователь, а не посторонний человек: для этого вы должны отправить ему письмо с соответствующей инструкцией. Шаг №2: взлом с использованием известных уязвимостей. Предположим, узнать у пользователя его данные не получилось. Тогда нужно приступать к следующей стратегии – через уязвимости. Почти все сайты подвержены той или иной из них. Наиболее известная сейчас – SQL-инъекция. Как видите, теперь мы имеем два запроса: один по указанным данным выполняет поиск пользователя, а другой изменяет его пароль на 12345. Сработанная инъекция даст хакеру возможность войти в аккаунт с новым паролем. Как защититься? Есть много способов. Один из вариантов – запретить ввод кавычек, символа “;” или ключевых слов языка SQL. Но надежнее всего будет отделить передачу данных от запроса. Так СУБД расценит команду-инъекцию не как элемент запроса, а как часть введенных данных. Шаг №3: грубая сила. Предыдущие 2 шага не сработали, а значит, хакер прибегнет к брутфорсу – подбору пароля. Для этого он воспользуется скриптом, который будет с помощью случайных комбинаций пытаться пройти авторизацию. Как защититься? Ограничьте число попыток авторизации. Шаг №4: разработка собственных способов взлома. Когда описанные выше методы не помогают, хакеру нужно заняться изучением исходного кода, чтобы понять, через какие уязвимости можно подобраться к вашему сайту. Особенно рискуют те, кто использует CMS (систему управления содержимым или, другими словами, движок для разработки сайта), потому что взломщик всегда может установить этот движок себе и это позволит ему заняться поиском уязвимостей изнутри. Как защититься? Стремитесь всегда пользоваться последними версиями: старые лазейки в них устранены, а новые пока никто не обнаружил. Шаг №5: изменить подход. Когда и точечный взлом не дал результат, хакеру приходится идти обходным путем. Некоторые пытаются добраться до хостинга сайта с помощью того же алгоритма, о котором мы говорили раньше. Но можно попробовать действовать совершенно иначе. Например, если на сайте можно установить аватар (т.е. загрузить изображение), взломщик через эту картинку попробует передать на сервер определенный скрипт – хотя бы файловый менеджер. В итоге хакер получит доступ к загруженным файлам (и к тем, в которых содержится информация для подключения к БД). Как защититься? Добавьте на сайт пару-тройку поверок для каждой HTML-формы, через которую загружаются файлы. Таким образом, взломщик не сможет загрузить ничего лишнего – только настоящие графические файлы. Тем не менее, и тут в защите есть брешь: вредоносный скрипт можно поместить внутрь изображения. Кроме того, хакер может сделать попытку подменить серверные скрипты путем подключения к FTP. И если он раздобудет данные для авторизации в phpmyadmin, в его руках окажется доступ к БД целиком. Но от утечки есть возможность защититься шифрованием. К примеру, хешируйте пароли алгоритмом SHA-2, а ценные персональные данные можно кодировать с помощью шифра Виженера, либо инструментом посерьезнее. Самое главное, хорошо спрятать ключ для расшифровки."
24;Подборка из 6 мифов про фриланс;Фриланс - это лучшая работа из всех возможных, так ли это? Мы развенчаем 6 популярных мифов про фриланс, которые принято считать за правду. Программисты и работа на фрилансе покрыты множеством мифов и для людей являются тёмным уголком интернета. Это спровоцировало большое количество заблуждений и мыслей, что работать на дому – это рай на земле. Другие напротив считают, что эта работа подобна шалости, всего лишь подработка, в целом ничего серьёзного не сулит. Сегодня стоит всё же снять покрывало завесы и вникнуть, что вообще собой представляет фриланс. Фриланс – это бедная ниша, в которой ничего серьезного не заработать. Подобному заблуждению подвержены люди старой закалки. Многие считают, что потолок для заработка на фрилансе – 10 000 рублей. Соответственно этим делом занимаются только студенты, девушки в декрете или в качестве хобби. Каждый родственник, когда я начинал, думал и говорил, что это просто баловство. Мнение изменилось, когда я смог жить несколько месяцев в Таиланде, а со временем стал снимать квартиру по высокой цене. С этого момента вопросы, что да как посыпались со всех сторон и стало интересно, чем же я всё-таки занимаюсь. Многие не могут соотносить дом и работу в своём воображении как что-то серьезное. В реальности здесь водятся деньги и при этом неплохие. Денег куры не клюют. Противоположное мнение предыдущему мифу. Зарождение такого впечатления начинается при формировании мысли, что фриланс – это громадный бизнес. Естественно, есть и те фрилансеры, что получают свыше 200 тыс. рублей ежемесячно. Таких людей можно исчислить по пальцам. Если человек просто работает самостоятельно, то заработок все равно весьма ограниченный. Абсолютная свобода. Конечно, частично - это правда, но свобода является лишь некоторой видимостью, так как ты самостоятельно распоряжаешься временем. Человек способен устраивать выходные в любые дни или выполнять проекты в удобное время суток. Все равно фрилансер привязан напрямую к работодателям. Заработок целиком и полностью зависит от них и от собственной продуктивности. Всегда ставятся дедлайны, порой они жесткие и приходится сидеть не днем или ночью, а и днем, и ночью. Не думайте, я не жалуюсь, и всё же доволен работой.Все фрилансеры – замкнутые люди, интроверты. Это такой же миф, что не соответствует реальности. Здесь хватает всяких людей, в том числе и экстравертов. Если говорить о себе, то я занял золотую середину, но интровертом наверняка не являюсь. Я не могу проводить много времени в одиночестве. Фриланс – это бесперспективная работа, выйти на совершенно другой уровень является нереальной задачей. Я могу сказать, что развитие во фрилансе наиболее активное и эффективное, при условии, что к этому стремишься. Можно менять как работу, так и виды деятельности в поисках собственного занятия по душе. Если человек желает стать успешным во фрилансе, обязательно нужно заниматься саморазвитием. Здесь без коммуникации, целеустремленности, способности решать проблемы, уверенности, стрессоустойчивости и самостоятельности делать просто нечего. Выделяя финансовую сферу, достаточно сложно найти работу наемного служащего, которому в ближайшей перспективе удастся приумножить собственный доход в разы. Фриланс подобного ограничения не накладывает, всё в ваших руках. Ещё одно заблуждение: «Фриланс – это легкие деньги, за несколько дней научусь ему, а затем перееду жить в Калифорнию.» Если единственная цель углубления во фриланс – это работать мало, а получать большие деньги, при этом не имея специальности, то Ни-хре-на вы здесь не до-бъё-тесь. Во фрилансе конкуренция достаточно жесткая и вам придётся соответствовать, проявляться ответственность, заниматься саморазвитием, идти в ногу с трендом. Многотысячные армии фрилансеров уходят со своих работ в офисах в ожидании небывалого успеха, а спустя считанные месяцы разочаровываются и снова идут туда же, откуда вышли.
25;Игровая механика – что это?;Пожалуй основное, что нужно сказать об “игровой механике”, это то, что четкой формулировки определение не имеет. Для игроков – это общий набор правил и механизмов, которые они используют во время игры. А для разработчиков – это те принципы, которые они создают для удобного взаимодействия игрока с игрой. Но этим нельзя закончить рассказ об игровой механике, давайте продолжим. Почему механика, а не правила? По мнению авторов книги Game Mechanics: Advanced Game Design механика не так однозначна и очевидна как правила. То есть, когда пользователь начинает играть в игру, он изучает правила, но этим ее возможности не ограничиваются. По своей сути игровая механика представляет собой весь комплекс взаимодействий с игрой и возможных вариантов реализации игрового процесса. Можем разобрать это понятие, даже на обычной настольной игре “Монополия”. В ней есть классический свод правил, прописанный в отдельном текстовой блоке, предлагающемся с игрой, но возможные варианты развития этой игры кардинально могут изменить весь ее ход. Так, используя карточки, фишки, валюту и другие детали можно придумать множество различных ходов, которые не ограничиваются простыми правилами. Именно за счет реализации многогранной игровой механики разработчики могут сделать всю игру интересной для пользователя, ну или реализовать очередной посредственный продукт с минимальным количеством возможностей. Классификация механик. Игровые механики, также как игры в общем, имеют разную систематизацию и отличаются друг от друга рядом качеств. Согласно авторам все той же книги Game Mechanics: Advanced Game Design, можно разделить механику на 5 категорий. Физика. Этот вид механики подразумевает различные манипуляции, связанные с передвижением предметов в пространстве и времени. То есть важно реализовать сам элемент и все возможные сценарии его передвижений, пересечения и столкновения с другими предметами, направление движений и время, за которое происходят все эти типы движений. Внутренняя экономика. Этот тип подразумевает взаимодействие с материальными ресурсами игры: деньгами, боеприпасами, валютой, ценными бумагами, недвижимостью и пр. Также к внутренней экономике можно отнести репутацию, здоровье, силу и прочие блага, которые можно купить, продать или выставить на аукцион. В каждой игре будет что-то свое, что участвует в этом процессе купли/продажи. Но взаимодействовать с ними игрок может не только во время сделки, но и в процессе выаолнения других действий. Например, в ходе ролевой игры ему нужно ходить и собирать какие-то предметы, количество которых отражается в цифрах, чтобы собрать определенное количество очков и пройти уровень. Прогрессия. К прогрессии относятся те действия игрока, которые он выполняет для передвижения от одной цели к другой. При этом механика открывает доступ для достижения пункта назначения или, наоборот, блокирует его. Например, банальное открытие двери может быть ограничено одним ее толчком или решением ряда головоломок, поиском ключей, взломом замка, подбором логических комбинаций и пр. Тактические маневры. Этот вид игровой механики можно встретить в стратегиях, авиасимуляциях, ролевых играх и соревновательных шутерах. Именно в сценариях этих игр часто можно выиграть при минимальном промедлении противника. Например, в моменты, когда происходит захват какой-то территории или сбор определенных ресурсов. Социальное взаимодействие. Ранее за подсказки другим игрокам и договорные матчи можно было попасть в бан. Но сегодня социальное взаимодействие является неотъемлемой частью онлайн-игр, где за приглашение друзей и проведение мероприятий внутри игры, даже раздают плюшки.
26;Что выбрать: сравнение Windows, Mac и Linux;Многие пользуются Windows по одной простой причине: так привычнее. Но не нужно забывать, что выбор есть всегда. И в данном случае это вопрос не только вкуса, но и профессионализма. Linux. Ядро данной операционной системы – важнейший компонент, который управляет работой всех программ – написал программист из Финляндии Линус Торвальдс. На сегодняшний день на основе Linux существует очень много различных ОС: для наглядности предлагаем взглянуть на перечень в Википедии. Особенность Linux заключается в том, что пользователь может полностью изменить систему под себя. Причем есть возможность не только экспериментировать с настройками, но и создать собственную ОС на базе Linux. К примеру, вы можете поменять дизайн на футуристический, либо с помощью Linux Mint работать на привычном Windows-интерфейсе. Существуют даже хакерские дистрибутивы. Самый известный из них – Kali Linux. Он позволяет взламывать Wi-Fi, находить уязвимости серверов, подбирать пароли, сканировать сети и содержит много других полезных программ из сферы информационной безопасности. В каждом дистрибутиве есть терминал. На вид он кажется довольно невзрачным, зато делает процесс управления компьютером и серверами более быстрым, чем в случае с программами GUI. Не зря большинство сайтов сейчас работают именно на Linux-серверах. Плюсы и минусы. С Linux вы получите все нужные инструменты и ПО для разработки. Сообщество операционной системы, да и частные программисты тоже, выпускают много аналогов. Распространяется Linux абсолютно бесплатно. Ей оказывают поддержку как небольшие компании, так и гиганты вроде Microsoft. Некоторых привычных программ нет для Linux. Например, iTunes и продуктов Adobe, в частности всем известного Photoshop. В Steam тоже запускаются не все игры. Тем не менее, ситуацию спасают аналоги популярных программ и игр. Прекрасной альтернативой iTunes является музыкальный сервис Spotify. А с помощью Wine можно и на Linux запустить многие не предназначенные для данной системы продукты. В Steam также предусмотрен специальный режим: пару изменений в настройках, и с играми тоже нет никаких проблем. MacOS. Теперь рассмотрим MacOS – ОС от компании Apple. Установить ее легально можно только на ПК фирмы-производителя. MacOS имеет много похожего с Linux, потому что это Unix-подобная операционная система, только исходный код в ней – закрытый. Вам будет легко в ней освоиться, если вы уже знакомы с терминалом и функционалом Linux. Плюсы и минусы. Для MacOS существует огромное множество программ. С этой ОС можно заниматься как веб-разработкой, так и созданием мобильных приложений под iOS-устройства. Так что если вы хотите начать писать продукты для iPhone и размещать их в App Store, вам придется перейти на MacOS. Данную систему удобно использовать для веб-разработки: есть много подходящих инструментов и ПО. А если, занимаясь написанием кода, вы захотите сделать перерыв и поиграть, выбрать будет из чего, ведь под MacOS адаптировано много популярных игр. Разработчики всего мира используют MacOS благодаря ее надежности и удобству. Особенно отмечают клавиатуру MacBook, идеально подходящую для печатания программного кода. Высокая стоимость. Но её можно назвать оправданной из-за долговечности маков. К тому же, обращаясь с устройством должным образом, вы в любой момент сможете легко его продать, потому что MacBook долгое время не теряет востребованности на вторичном рынке. Windows. С Windows знаком каждый, поэтому без лишних слов кратко пройдемся по главным плюсам и попробуем выявить возможные недостатки. Плюсы и минусы. Windows – самая популярная ОС. И поэтому для нее есть почти все программы, она работает почти со всеми известными устройствами. Большую популярность можно считать и недостатком, поскольку для Windows создается и распространяется больше всего вирусов, рекламного ПО, скрытых криптовалютных майнеров и т. п. Под Windows можно найти самые разные редакторы кода и специальные инструменты для программирования. Но, в отличие от Linux, у них есть некоторые минусы. К примеру, в Windows Home с точки зрения разработки функционал работает недостаточно полноценно. Чаще всего компьютеры поставляются именно с Windows. Редакции ОС быстро устаревают и перестают подходить для решения некоторых задач. Поэтому приходится постоянно приобретать новую нужную версию.
27;Чем веб-приложение отличается от сайта?;"Рядовой пользователь не видит между ними разницы. Он заходит по адресу на страницу, получает желаемый результат и все – больше ничто его не волнует. Но если вы разработчик – это совсем другой вопрос. Программист, создающий данные продукты, должен очень хорошо понимать, какая между ними есть разница. Однако самое интересное, что даже среди опытных разработчиков есть различные мнения по этому поводу. Мы сейчас постараемся осветить главные отличия между сайтом и web-приложением, которые помогут вам лучше ориентироваться в данном вопросе. Сайт - это совокупность веб-страниц, которые связаны связаны между собой и содержат контент разного формата: текст, картинки, видео, музыка и пр. Сайт может состоять из одной или нескольких страниц, а его содержимое включать или просто текст, или текст вместе с разными медиа-файлами. Виды сайтов: для знакомств; блоги; сообщества; поисковики; познавательные; образовательные и пр. Например, Википедия, Яндекс, Google, Amazon. Особенности сайтов Дружественность к пользователям; Легкий процесс поиска необходимой информации; Отображение полноценного контента; Легкая навигация. Для чего может создаваться сайт Для демонстрации своих продуктов; Продвижения бренда, развития бизнеса; Рассказать людям о своих занятиях и достижениях; Пребывание онлайн для того, чтобы быть доступным клиентам. Веб-приложение - полноценная программа, доступ к которой осуществляется через браузер. Другими словами, это тот же сайт, только с интерактивными элементами и обширным функционалом. Например, Twitter, Фейсбук, YouTube и пр. Одна из главных отличительных черт веб-приложений – высокая настраиваемость. А еще они способны решать сразу много задач. Именно поэтому сайт сделать намного легче, чем веб-приложение, для создания которого необходима опытная и продвинутая команда разработчиков. Особенности веб-приложений Кроссплатформенность; Автоматизированное тестирование; Место размещения – в облаках. Для чего может создаваться веб-приложение Чтобы обеспечить доступ к имеющимся данным с разных устройств (мобильных, стационарных, оснащенных любой ОС) через все браузеры. Главные отличия сайтов от веб-приложений Характер взаимодействия с клиентами Размещенный на сайтах контент пользователи могут просматривать и слушать, и это никак не меняет работу ресурса. В случае веб-приложения помимо потребления контента пользователи также манипулируют определенными данными, к примеру, заполняют формы. Аутентификация Это не обязательный процесс для обычных сайтов. В редких случаях пользователям могут предлагать регистрацию для доступа к расширенному функционалу или подписки на обновления. А в веб-приложениях без аутентификации не обойтись. Здесь функционал и спектр интерактивного взаимодействия гораздо шире, чем на сайте. И чтобы использовать все эти возможности, нужно с помощью логина и пароля зайти в личный аккаунт. Уровень сложности решаемых задач Если сайт просто отображает данные, имеющиеся на его страницах, то веб-приложение обладает намного более сложным функционалом. Потребители контента На сайтах все данные статичны и чаще всего открыты всем посетителям. Взаимодействие веб-приложения с пользователями носит более сложный характер и невозможно в полной мере без аутентификации. Деплоймент Чтобы внести простые изменения в сайт, не нужна полная компиляция и развертывание – только обновление HTML-кода. А для изменения веб-приложения разработчику нужно по новой скомпилировать, а затем развернуть ПО."
28;Технология Tor и её применение в Tor браузере;В Интернете часто говорят про технологию TOR, а еще чаще говорят про TOR браузер. Что это все такое и для чего оно нужно? А вы знали, что отследить путешествие человека в интернете очень просто, а ваш оператор обязан по первому же требованию влиятельных органов слить все о вас? Конечно же, вы знали, ибо, скорее всего, это знание и заставило вас немного помозолить глазки, и ознакомиться с данным материалом. Так что не буду вас задерживать, и приступим к делу. Среди множества технологий, делающих вас анонимным в сети, существует и, так называемая, технология Tor. А суть её существования заключается в том, чтобы IP-адрес пользователя всемирной паутины постоянно менялся. Это значительно усложнит поиски того, кто именно просматривал тот или иной сетевой ресурс. Таким образом, можно с более-менее спокойной душой попасть в Темный интернет (с англ. Darknet).
29;Как работает технология Torrent?;Современные Torrent-клиенты работают на основании технологии BitTorrent – это протокол, разработанный Брэм Коэн, программистом из Америки. В этой статье расскажем про эту технологию. Рассмотрим на примере Изначально ситуация была такова: школьные годы, домашнее задание по математике решил всего один «ботан», но сдать нужно каждому. Так приходилось за 1 перемену списать решение всем 30 одноклассникам. Одновременное списывание возможно только 2-м, если хорошо постараться, 4-м ученикам. Каждому потребуется 3 минуты для перенесения информации, а перемена содержит только 15 минут. Так успеет переписать только 10-20 человек, требуется решение выходящее за стандартные рамки. Учтём, что раз я уже списал задание, могу его передать другим людям и таким образом моя тетрадь умножит эффективность фактически вдвое. По мере списывания и увеличения количества ответов, информации становится больше и одновременно большее количество людей могут загрузить данные, в нашем примере – списать домашку. Простые расчеты: Спустя 3 минуты высокий бал получит отличник, который сделал задание, и 2 двоечника. Через 6 минут: из 3 тетрадей получится списать 6 ученикам (уже сформировалось 9 человек с предыдущими). Через 9 минут: к сумме готовых ответов прибавляется 18 решений (в сумме 27 человек). К 12 минуте: остались последние 3 неудачника, которым нужно успеть за 3 минуты выполнить задание и сбегать в туалет. Говоря кратко: каждый отдельный и объёмный файл разделяется на множество небольших отрывков и, пользователь принимает файлы по кусочку. Когда на компьютере появился файл, он может передать его дальше. Работа технологии BitTorrent Подробнее о реализации текущей технологии в реальности: Пользователю необходимо передать файл какой-то другому или общественности, при условии, что объём информации большой. Этот человек инициализирует запуск приложения на собственном компьютере – это торрент-клиент. Согласно особому формату, приложение формирует описание для файла: наименование, размер, деление на частички и информация по распределению данных. Все кусочки сохраняются с новым расширением .torrent. Когда всё будет подготовлено производится загрузка файлов на отдельный, выделенный сервер – торрент-треккер. Несмотря на наличие файлов, сервер самостоятельно не участвует в закачке, а только управляет ей. Дополнительно клиент сохраняет координаты сервера и вкладывает адрес для загрузки файла. Затем каждый пользователь, нуждающийся в данном огромном файле, будет вынуждены предварительно загрузить торрент клиент, который обрабатывает все файлы с расширением .torrent. Приложение распознаёт ранее сгенерированное описание и определяет координаты для сервера-управления. С выделенного сервера приходит информация о месторасположении информации. Каждый пользователь имеет собственную часть загруженных кусочков файлов. Приложение налаживает соединение с пользователями и запрашивает отдельные кусочки информации. Предположим, что я загружаю определённый кусочек данных, а сервер получает об этом уведомление. Если кому-нибудь потребуется данный участок информации, управляющий сервер будет просить его у пользователя. «Ещё бы, мне же не жалко, берите файл» – отвечает владелец. Чем большее количество задействованных пользователей в сети, тем быстрее удастся загрузить файлы. Особенности системы Проблема сразу становится очевидной – есть люди, которые не готовы бескорыстно помогать другим, в отличие от меня. Скачать данные хочется каждому, а вот отдавать их не особо то и хочется, так как необходимо сохранять информацию в первоначальном виде на собственном жестком диске (у многих из нас итак всё загружено сериями 120-сезонного сериала). Для работы раздачи нужно постоянно держать ПК в активном положении, а также использовать сеть интернет, а он ведь бывает и с оплатой за трафик. Для стимулирования пользователей вставать на раздачу данных и заниматься альтруизмом многие треккеры пошли по пути рейтинговой системы. Так на каждый профиль начисляется соотношение, сколько файлов было загружено и сколько роздано. При небольшом количестве раздачи появляется невысокий рейтинг, а при его падении теряется доступ для загрузки новых файлов. Так отмечается повышенное удобство передачи огромных файлов, например, фильмов, сериалов, сборников песен, игр и другого медиа-продукта. Должной оценки со стороны киностудий, а также музыкальных лейблов приложение явно не получило. Поэтому с определённой регулярностью они мешают торрентам развиваться и предотвращают прогресс различными доступными способами. Главный рычаг воздействия – это блокировка доступа и жалобы согласно авторскому праву на распространение данных. Постоянно проводятся исковые делопроизводства по отношению к владельцам торрент-треккеров, а иногда заводятся дела против активных пользователей. В сети появилось отличное выражение: Ты занимаешься благотворительностью? – Естественно, оставляют торрент-клиент на раздаче. Отношение к программе Торрент Не все компании видят в технологии BitTorrent злостного врага, некоторые оценили достоинства дешевой и быстрой передачи информации. Такие корпорации используют Torrent, как инструмент для достижения собственных целей. Среди самых известных правообладателей, которые оценили функциональность и простоту технологии находятся: отдельные радиостанции, которые передают в данном формате собственные записи, возможно вы слышали о: CBC, NRK (радиостанция из Норвегии), VPRO (страна - Голландия), МКЛП. лейблы, записывающие музыку, и некоторые киностудии внедряют технологию в качестве дистрибуции для своей продукции. Конечно же, за товар уплачиваются средства. Пока что прогресс только на стадии экспериментов. изготовители программ и игр для компьютера давно полюбили технологию, так как она в разы снижает нагрузку на сервера компаний. Известной корпорацией с подобной технологией является Blizzard, у которой присутствует собственное приложение, работающее по технологии BitTorrent. киты бизнеса – Твиттер и Фейсбук задействуют Torrent для создания приложения, которое проводит автоматическое обновление ПО от указанных разработчиков с множественных серверов по всему миру.
30;Как защитить себя от DDoS-атак? Практические примеры;"Несмотря на то, что первая зарегистрированная DDoS атака была произведена еще в 1999 году, они не сравняться с современными кибератаки этого типа, которые стали более опасными. В 2016 году их скорость превысила 1 Тбит/с, что говорит о молниеносном воздействии на системы и несет еще больше угроз. Но выход есть. Как защитить себя в условиях DDoS атак – поговорим в статье. Что значит DDoS атака? Отказ от обслуживания или DDoS атака – это совокупность действий, которые направлены на искусственный перегруз сервера сайта, приложения или любой другой интернет-площадки, что приводит к частичному или полному прекращению их работы на время атаки. Ее цель ограничить или полностью закрыть доступ в систему для обычных пользователей сети. Так как атака происходит из разных источников и океан запросов летит буквально отовсюду, крайне непросто остановить его. Но как только атака закончится, все узлы, на которые она была направлена, достаточно будет перезагрузить, и они вновь будут исправны. Существует несколько видов DDoS атак, каждый из которых воздействует на систему на разном уровне. Как защититься от атаки на разных этапах? Лучшим вариантом защиты является профилактика. Для предупреждения DDoS атак на систему необходимо. Повысить пропускную способность Если вы сами можете повысить пропускную способность, это позволит защитить систему от атаки. Но нельзя сказать, что это 100% гарантия от любых попыток злоумышленников. Все будет зависеть от их умения масштабировать атаку в момент ее проведения и от того, насколько объемной она будет изначально. Делегировать ответы Большинство компаний могут позволить себе делегировать часть ответов своему интернет-провайдеру или специальному сервису, оказывающему подобные услуги. Тогда при атаке на сервер, часть трафика будет перенаправлена к ним, что разгрузит систему и не даст ей выйти из строя. Важно правильно составить договор об оказании подобных услуг, чтобы в момент атаки, действительно была произведена защита. Построить план В каждом деле важно планирование, DDoS атаки не исключение.  Перед атакой следует: продумать, какие действия должен выполнять каждый сотрудник во время атаки; прописать схемы с расположением всех локализаций; найти провайдера или компанию, на которых можно делегировать часть ответов; продумать кого следует оповестить об атаке, в случае ее начала; спланировать ответы на вопросы пользователей при атаке. Во время атаки следует: убедитесь, что это именно DDoS атака, определите ее вид и объем; оповестите всех ответственных лиц, о начале атаки; обратитесь к компании, которая занимается делегированием ответов. После атаки следует: соберите как можно больше данных о случившемся; проведите анализ полученной информации; улучшите качество защиты системы. Распечатайте и раздайте план действий каждому сотруднику, чтобы каждый был осведомлен о правильном наборе действий до, во время и после атаки. Не пренебрегайте безопасностью! DDoS атака – это поражение вашей системы сотнями зараженных устройств, которых именуют ботнетами. Один из самых запоминающихся случаев отказа от обязательств был в 2016 году, когда молниеносная атака снесла HBO, Netflix, GitHub, Airbnb, Twitter и другие сайты одного из крупнейших DNS-провайдера Dyn. Всему виной стал ботнет Mirai, который максимально запустил в течение атаки порядка 60 000 iOT-устройств. В 2017 году он перестал быть активным. К сожалению, DDoS атаки это не просто прекращение работы вашего сайта для пользователей на маленький промежуток времени. Это полномасштабное поражение, которое может повлечь длительное отсутствие доступа к ресурсам вашей компании. Это приведет к ухудшению пользовательского опыта, уменьшению количества продаж, потере прибыли и дополнительным расходам на восстановление доверия клиентов. Будьте осторожны и поработайте над профилактикой!"
31;Сможет ли искусственный интеллект захватить мир?;Уже не один десяток лет известно, что ИИ может заполонить весь мир отодвинув человека на второй план. Сможет ли это произойти и каковы на это шансы? Человекоподобные роботы смогут забирать рабочие места и лишать людей не только заработка, но и смысла жизни. Однако и человечество не стоит на месте. Новые знания и умения мы тоже осваиваем легко, было бы желание. Что мы знаем? Двадцатый век познакомил нас с первыми компьютерами и автоматизированным производством, что вызвало бурю негодований. Но уже в 21 веке развитие технологий сделало еще больший рывок. При этом предприимчивые бизнесмены не побоявшиеся рискнуть наполнили свои карманы прибылью. Режиссеры и писатели считают, что ИИ погубит нашу планету, описывая это в своих книгах и экранизируя в фильмах. Он, конечно, окажет свое влияние, но не думаю, что Апокалипсис наступит скоро. Даже наоборот качество жизни может стать лучше при разумном использовании. Предоставляя хороший уровень образования специалистам, их здоровое самосознания для чего они это делают и уважительное отношение к земле и всему живому. С этим всем человек и ИИ смогут жить в гармонии. Начиная со школьной скамьи, необходимо говорить детям о научных достижениях и ИИ, не забывая отмечать, что научные достижения должны быть во благо. ИИ и человеческие качества Что еще хочется отметить, так это то, что ИИ никогда не сможет творить, создавая шедевры, писать музыку, сочинять стихи, придумывать шутки, и т.п. Это всегда останется прерогативой человека. Ни один человек не захочет изливать душу роботу, даже если он будет очень похож на человека, поскольку мы никогда не дождемся от него сочувствия или дружеского совета. Да, в медицине ИИ может творить чудеса, излечивая людей от страшных болезней, но он не сможет чутко посочувствовать или с вниманием отнестись к больным детям. ИИ не сможет достичь тех фантастических возможностей (бесконтрольное самообучение, саморазвитие, и принятие самостоятельных решений,…), если только человек ему это не позволит. Я думаю, что ни один разумный человек не захочет, чтобы его подвинул по карьерной лестнице робот. Может ли ИИ сам решить, что нужно захватить планету и истребить человечество? Конечно нет! Он принимает те решения, которые человек залаживает ему в программу. Главное понимать чего мы хотим достичь этими технологиями и куда движемся. ИИ создавался для того, что бы гармонично существовать с людьми и помогать в их деятельности, а не руководить людьми. ИИ не поглотит человечество, но повлияет на качество его жизни и создаст конкуренцию среди некоторых рабочих кадров.
32;Искусственный интеллект в реальной жизни: примеры, которые впечатляют;"ИИ уже успел обосноваться во многих важных сферах деятельности человека, существенно упростив нам выполнение очень многих задач. Рассмотрим интересные примеры. Управление персоналом Технология искусственного интеллекта активно применяется в управлении персоналом. Современные компьютерные алгоритмы намного лучше людей справляются с планированием и поиском решений. Как минимум есть 5 вещей, благодаря которым мы можем сделать вывод, что умные системы сильно облегчают труд HR-менеджеров: Искусственный интеллект гораздо быстрее просматривает и анализирует тысячи резюме потенциальных кандидатов на должность. Он способствует повышению коэффициента удержания работников, а также их продуктивности, что положительно сказывается на результатах работы всей организации. С помощью ИИ работодатели могут намного точнее описывать требования, предъявляемые к будущему сотруднику, и разные детали вакансии (необходимая квалификация, условия труда и т.д.), что способствует более быстрому поиску максимально соответствующих должности работников. ИИ делает взаимодействия с работодателем более глубокими и тесными, тем самым налаживая более доверительную атмосферу между ним и его подчиненными. Искусственный интеллект экономит время, потому что с его помощью каждодневные, рутинные задачи выполняются намного оперативнее. Маркетинг Как думаете, что будет, если ИИ займётся развитием бренда? Компания от этого выиграет или проиграет? Ярким примером, который поможет нам найти правильный ответ на этот вопрос, является Netflix. Почему Netflix так сильно ""затягивает""? Причина в том, что они используют очень точную технологию прогнозирования, в основе которой лежит анализ поведения пользователя. ИИ отслеживает ваши действия и по ним делает вывод, какие фильмы, сериалы и программы вам нравятся. Затем программа сравнивает полученные данные с реакциями других пользователей и предлагает  только самые интересные (именно для вас) рекомендации. Ключевой момент заключается в том, что объем информации в системе стремительно растет, поэтому искусственный интеллект становится только умнее и способен с каждым днём все точнее угадывать ваши предпочтения. Медицина В мире уже есть система на базе ИИ, которая позволяет предотвращать инсульты за счёт того, что она отправляет терапевту пациента предупреждение о вероятной угрозе. Но это не все. Мы можем привести ещё 5 примеров того, что умные технологии могут сделать для здравоохранения: Создавать более совершенные медицинские инструменты, приборы, девайсы. Облегчить работу с электронными картами пациентов (заполнение, хранение, учёт). Сделать медицинское обслуживание более доступным в удаленных территориальных единицах и слаборазвитых регионах. Повысить точность обработки результатов диагностики и анализов. Развить возможность следить за состоянием здоровья каждого отдельного пациента посредством носимых персональных электронных устройств. Банковские системы Уже сегодня многие банки используют ИИ для обеспечения качественной клиентской поддержки. Также с помощью умных систем происходит обнаружение аномалий и предотвращение критичных ситуаций. Кроме того, ИИ активно применяется для выявления мошеннических действий с картами. Финансовая сфера Финансовые аналитики, заручившись поддержкой искусственного интеллекта, занимаются анализом рынка и пытаются предсказать пути его развития. Системы с ИИ прекрасно справляются с такими задачами, потому что они способны очень быстро обрабатывать колоссальные объемы данных. К тому же компьютерные алгоритмы умеют самообучаться: на примере уже случившихся ситуаций они строят прогнозы, могут ли подобные случаи вновь повториться, и если да, то каким образом. Японские брокеры из Nomura Securities потратили несколько лет на сбор опыта знающих трейдеров, после чего проанализировали полученные данные с помощью ИИ. В результате исследований компания создала новую технологичную торговую систему, способную после изучения информации о рынке в прошлых периодах делать высокоточные выводы о том, как в ближайшем будущем будут происходить колебания цен акций. Такие предсказательные возможности системы позволят биржевым спекулянтам и инвесторам действовать более продуманно, принимая самые выгодные решения из всех возможных. Искусственный интеллект не стоит на месте. Поэтому можно рассчитывать, что совсем скоро он станет способным: Руководить компаниями. Присматривать за животными, в том числе домашними питомцами. Анализировать расстановку политических сил. Управлять системой беспилотных автомобилей. Делать мгновенный и качественный перевод с разных языков. В человеческой речи распознавать эмоции. Предвидеть трудности с нахождением свободного парковочного места в районе, вычисляя наиболее загруженные часы. Обнаруживать рак во всех слоях тканей быстрее, чем это делают квалифицированные специалисты. Выявлять и разрабатывать меры по предотвращению заболеваний сельхозкультур. Идентифицировать личность. Обыгрывать человека в карточных играх. Назначать встречи по электронной почте."
33;Нужен ли сейчас PHP? Будущее этого языка;"PHP – это мёртвое направление из-за его устаревшей и бесполезной экосистеммы, которой уже 22 года. Мы разберемся в его будущем и узнаем нужен ли он сейчас! Всем известно, что язык программирования PHP – это мёртвое направление из-за его устаревшей и бесполезной экосистеммы, которой уже 22 года. С появлением Node и производных фреймворков, работающих асинхронно, необходимость в PHP полностью отпала. Очевидно, что Node выигрывает у PHP, так как по умолчанию асинхронная система значительно лучше, а также быстрее. PHP работает синхронно (не будем учитывать плохие костыли) и просто не в состоянии соревноваться с молодым приемником – Node. Перспективы трудоустройства Разработчики на PHP не имеют будущего, они уходят в прошлое как чистильщики дымоходов или топщики в тепловых поездах. Как только была выпущена первая модификация Node (v0.0.1), все ведущие компании, которые использовали PHP 22 года, отказались от него и постепенно перешли к асинхронному Node. Стек для разработки мгновенно и многократно улучшился. При этом все понимают, что успешная работа (за исключением Slack) подразумевает создание веб-ресурсов на основании Node и хранения информации в базе данных MongoDB. Небольшой график сравнения работы и Фактор Крутости Разработчика: Экосистема языка Экосистема – это, пожалуй, определяющий фактор при выборе программной среды для разработки. PHP из-за продолжительной жизни приобрел множество крупных фреймворков, которые делают функционал языка более полным. Приятно, что фреймворки продолжают поддерживаться. Не стоит скрывать, все ненавидят эти библиотеки, например, Lavarel (аналог Rails) или энтерпрайз продукты вроде Zend или Symfony. Разработчики Node пошли иным путем, так решили устранить шаблонные фреймворки, которые теряют много функционала в пользу массового производства. Получается, что всем неудобно пользоваться библиотекой, но что-либо изменить нельзя, так как некоторые разработчики будут недовольны. В Node каждый человек разрабатывает фреймворк под себя, что позволяет подчеркнуть индивидуальность и значительно выделиться среди конкурентов. Передав эстафету разработки в руки программиста, всё стало зависеть только от него, соответственно, как удачные, так и неудачные решения – это вина программиста. В большинстве случаев изобретение колеса – это бесполезное занятие, но создать собственное колесо, удобное конкретному разработчику, имеет смысл. Практические показатели указывают на увеличение производительности работы в 2 раза. Уже сейчас Node имеет Developer Cool Factor™, что переводится как Фактор Крутости Разработчика, зависящий от созданного фреймворка. Потрясающие результаты можно наблюдать на графике ниже: Временные затраты Затраты временных ресурсов разработчика сложно оценить, но самостоятельно чувствуется, когда человек тратит 5 минут на написание алгоритма или целые сутки, долго манипулируя с различными производными шаблонного фреймворка. Замечено, что PHP-разработчики затрачивают больше усилий и времени на выполнение функциональных программ, чем на увеличение Крутости и приобретение рейтинга на GitHub. При запуске стартапа к команде с меньшим рейтингом будет подорвано доверие, ведь непродуктивное использование времени скажется на разработке. Звёзды на GitHub – это качественный способ отражения навыков разработчика. Из рабочего времени PHP-программиста уходит много времени на выслушивание жалоб людей по поводу языка: Вещи, которые вы не сможете сделать являясь PHP-разработчиком Про полноценное асинхронное программирование вспоминать не стоит; Написать собственный шаблон для React TODO MVC; Создать полноценный бэкенд на серверной стороне и фронтэнд на клиентской стороне; Открывать специальные утечки памяти; Создать значимость пробела; Добиться утраты части данных в процессе запросов; Разрешить проблему недостатка пищи на всей Земле; Работать с JavaScript; Честно сказать людям, что я – PHP-разработчик. PHP как инструмент для бизнеса Всем нам известно, что сегодня PHP не является полноценным инструментом для создания бизнес-приложений, поэтому ниже перечень организаций-неудачников, что используют PHP и обладают меньшим успехом, по сравнению с более продвинутыми компаниями, которые развиваются, используя Node."
34;8 любопытных фактов о Java;"В 1995 году Sun Microsystems выпустили объектно-ориентированную среду программирования Java. И сейчас этот язык стал одним из самых популярных во всем мире. Обратите внимание на показательную статистику: около 4 млрд мобильных устройств функционируют на Java; на этом языке работает 125 млн телевизоров; он регулярно возглавляет рейтинги лучших ЯП по мнению разработчиков; благодаря принципу WORE, который расшифровывается как ""Write once, run everywhere"" (Написал раз – запускай повсюду), число поклонников Java увеличивается с каждым днем. Востребованность Java действительно впечатляет. После запуска вышло 9 основных версий. Они стали феноменальными по одной очень важной причине – редчайшей портативности, ведь приложения на Java подходят для любой ОС или устройства. Главными преимуществами этой среды можно назвать независимую архитектуру, простоту в исполнении программ, надежность и безопасность. И в подтверждение своих слов, предлагаем вам познакомиться с 8 любопытными фактами о Java: В Соединенных Штатах на 90% компьютеров есть Java VM. И больше чем 95% корпоративных ПК используют данный язык. На старте разработки Java проектировался для цифрового интерактивного TV. Однако сфера по уровню развития оказалась неготовой, чтобы применять его. Создатель языка Джеймс Гослинг изначально назвал свой продукт в честь дерева, которое росло возле его офиса – Oak (Дуб). Потом имя изменили на Green, но только третий вариант стал окончательным – Java. Вдохновением для разработчика стал одноименный сорт кофе. Вот почему на официальной эмблеме красуется символ чашки с дымящимся напитком. Также распространена версия об аллюзии, т. е. намеке на кофейные аппараты, которые первыми среди прочих бытовых устройств начали программироваться на Java. В 2010 году контроль за развитием языка перешёл к Oracle, поглотившей фирму Sun Microsystems. В среднем заработная плата Java-программиста составляет около 84 тысяч долларов. Во всем мире насчитывается до 9 млн Java-разработчиков. Портал Tiobe.com отдал Java II место в рейтинге популярности языков программирования, признав более востребованным только один язык – C. Основная Java-технология – фреймворк автоматического тестирования программ JUnit – используется 8 из 10 программистами. Следующим по популярности является Jenkins: им пользуются 70% специалистов. В последнем релизе эффективность и производительность среды были повышены за счет уменьшения числа стандартных вставок, улучшению коллекций и добавлению примечаний. Дюка – символ языка Java – создал Джо Пэлрэнг. Впоследствии одной из работ аниматора стал популярный во всем мире мультфильм ""Шрэк""."
35;8 языков, подходящих для Back-end разработки;"Backend – это все, что связано с работой на сервере. Реализовать эту часть сервиса можно при помощи множества языков. В статье рассмотрим 8 основных языков для этой задачи. PHP Его использует подавляющее большинство сайтов – около 78%. Тем не менее, у PHP есть свои недостатки, например, программы, написанные на PHP, трудно масштабировать. К тому же они иногда бывают довольно медленными. Для начинающих разработчиков это один из лучших языков, потому что: установка и настройка PHP более легкие, чем, например, у Ruby on Rails. Уже через 5 минут после скачивания языка вы сможете приступить к работе; он лоялен к ошибкам: после запуска программа выполняется до тех пор, пока не дойдет до фрагмента с проблемами в коде; обладает большим сообществом, есть множество обучающих материалов. Возможности, которые дает PHP: собирать введенные в формы данные (для авторизации и др.); делать динамический контент; отправлять cookie-файлы и получать их; выполнять скрипты с выводом результата в командную строку; писать настольные приложения; выполнять серверные сценарии. Крупные компании и проекты, которые используют PHP: Facebook, Yahoo!, Viber, Wikipedia, Buffer, BlaBlaCar, YouTube, DocuSign. Python В последнее время Python обрел большую популярность. Его используют и в web-разработке, и для написания настольных приложений. Новичкам: это, наверное, самый лучший вариант для изучения, потому что в Сети есть огромное множество обучающих материалов. К тому же синтаксис Python более простой для понимания, чем у аналогов. Это язык с открытым исходником и динамической типизацией, а также поддержкой функционального программирования, ООП, АОП. Возможности и сферы применения Python: мультиплатформенные shell-скрипты; ускоренная автоматизация; разработка веб-сайтов; машинное обучение и наука о данных. Крупные компании, которые используют Python: Google, Uber, Facebook, Pinterest, Yandex, Mozilla, Netflix, Intel. JavaScript Это универсальный язык, который применяют и во фронтенде, и в бэкенде. Его тоже можно рекомендовать начинающим, потому что в нем немного настроек и работать можно непосредственно в браузере. Однако гибкость иногда дорого обходится этому языку, потому что она выливается в такие последствия, как: медленная работа скриптов, сложная поддержка и масштабирование (как, впрочем, во многих языках с динамической типизацией). К плюсам JavaScript можно отнести большое сообщество и обилие различных обучающих материалов. Для существенного расширения возможностей JS используется платформа Node.js. Благодаря ей JavaScript-код запускается на backend-е без браузера. Жизнь разработчиков облегчается еще тем, что пакетный менеджер npm содержит большое число готовых типовых решений, а значит, не приходится тратить время зря, повторно изобретая велосипед. Сферы применения JavaScript Как мы уже заметили, язык универсальный: настольные приложения; front-end и back-end; приложения для смартфонов и планшетов; серверная разработка; игры; бытовая техника и т.д. Компании, которые используют JavaScript: BMW,  Airbnb, Amazon, Codecademy, eBay, Apple. Java Этот язык не нуждается в представлении. Он не теряет огромной популярности уже третий десяток лет и остается одним из самых востребованных и универсальных инструментов. Главная причина универсальности Java кроется в виртуальной машине JVM. В большинстве других языков после компиляции полученный код может проявлять себя различным образом на всех платформах и типах устройств. Но в Java такой проблемы нет. После обработки в JVM программа будет одинаково корректно выполняться на любом гаджете, вне зависимости, где была осуществлена компиляция кода. Сообщество у Java тоже огромное, и в Интернете есть ответы почти на все возможные вопросы. Возможности Java С помощью Java можно решать десятки задач, в том числе: сетевое программирование; создание мобильных приложений для устройств на базе Android; разработка back-end-а; создание API для БД; разработка настольных приложений; цифровая обработка графических файлов. Крупные компании и проекты, которые применяют Java: Amazon, Airbnb, Netflix, Uber, Twitter, Pinterest, eBay, Deutsche Bank. .NET (VB и C#) ASP NET – это платформа от Microsoft, которую применяют создатели веб-сайтов, использующие в работе Visual Basic (VB), а также C# и некоторые другие языки. Фреймворк .NET функционирует на базе архитектурного паттерна MVC. Пользовательские запросы принимаются контроллером (Controller), затем он вступает во взаимодействие с моделью (Model) и полученный после обработки данных результат представляется (View), т.е. отображается в форме интерфейса страницы. .NET отличается большой стабильностью и надежностью, поэтому-то он и стал таким популярным инструментом для бизнеса. И раз речь идет о продукте Microsoft, можно не сомневаться, что у него очень хорошая поддержка. VB Простой и распространенный язык с несложным синтаксисом, который отлично подходит для начинающих программистов. Visual Basic перенял стиль своего предка – BASIC. В нем сочетаются элементы ООП, и он часто применяется для прототипирования. Минусом программирования с помощью VB можно назвать большой объем памяти, который нужен для работы с инструментами разработки. C# C# относится к высокоуровневым языкам, а значит, написанные на нем программы могут не зависеть от особенностей архитектуры процессора каждого конкретного устройства. Популярность языка объясняется некоторыми преимуществами, характерными C++, но на C# легче писать код, не допуская при этом серьезных ошибок. Возможности, которые дает .NET: работа с Big Data; создание приложений; разработка игр и др. Крупные компании и проекты, которые применяют .NET: Softserve, Microsoft, Deutsche Bank, StackOverflow и Starbucks. Go Golang — это продукт компании Google с открытым исходником, компилируемый и с лаконичным, простым синтаксисом. Язык Go создавался для разработки высокоэффективных программ, которые были бы максимально эффективными на новейших процессорах и системах. Сферы применения Go: написание сетевых инструментов; разработка программ для распределенных систем; создание ПО для обработки больших объёмов данных. Крупные компании и проекты, которые применяют Go: BBC, Dropbox, Avito, SoundCloud, Apple, Docker, Alibaba, Xiaomi, Mail.ru, Tinkoff и Ubuntu."
36;Рационально ли запускать коммерческий сайт на WordPress сегодня?;Популярные платформы вот уже несколько лет рассуждают о потере актуальности систем управления контентом сайта – CMS. Сегодня появилось много более техничных и интересных альтернатив. Да, в свое время CMS сама отодвинула привычные статичные сайты, написанные на основе HTML и CSS. Она позволила создавать динамичные платформы с обширным функционалом. Для их реализации и поддержки также использовались серверные языки. Но с родни множеству преимуществ, у подобных сайтов есть свои недостатки, например, низкие показатели производительности и проблемы с безопасностью данных. Как статические, так и динамические сайты все равно никуда не денутся в ближайшие десятилетия. Хотя бы потому, что порядка половины всего количества онлайн-площадок создано именно с помощью CMS. Но для многих остается вопрос, стоит ли реализовывать коммерческие сайты на основе одной из самых популярных систем управления контентом сайта – WordPress. И мы хотим ответить на него более развернуто. Пару слов о WP WordPress уже 18 лет является одной из самых востребованных систем управления контентом. Он прост в управлении, функционален и позволяет создать удобные платформы для разных сфер бизнеса. А ведь сначала это была обычная площадка для ведения блогов. Абсолютно любой пользователь сможет быстро разобраться в особенностях ведения сайтов на WP, т.к. сегодня есть огромное количество материалов для облегчения этого пути. Согласно проведенным исследованиям сегодня порядка 65,2% всех работающих сайтов созданы при использовании CMS WordPress, что составляет 43,1% всех сайтов сети Интернет. Интересно, что даже сайты Белого дома и New York Times реализованы именно на WP. Основные проблемы WP Можно сказать, что своей популярности WordPress добился из-за того, что он прост в использовании и абсолютно бесплатный, поэтому идеален для запуска бизнес-проектов с небольшим бюджетом. Так, для реализации достаточно открыть официальный сайт и следовать прописанным инструкциям. Но! У WP нет функционала, который необходим для продажи услуг. Созданная на нем платформа не сможет предоставить клиентам аналогичные возможности, которые есть на обычных веб-сайтах. То же самое обстоит с безопасностью информации и постоянным обновлением этой CMS. При этом, если вы вовремя не обновите все компоненты – есть высокий риск еще большей уязвимости сайта для злоумышленников.
37;Какие профи требуются в геймдеве, кроме программистов?;Программист является ключевым, но не единственным звеном в разработке игр. Для их реализации потребуются и другие профи. Какие основные сферы есть в геймдеве – рассмотрим в этой статье. Геймдизайнер Разработка игровой механики, список заданий, путь игрока в игре, его цели и роли, а также логические связи – это все зона ответственности геймдизайнера. От качества выполненных им задач будет зависеть заинтересованность игрока процессами игры, переживаемые им эмоции и удовлетворенность процессом. Этот специалист должен по-настоящему любить игры, иметь большой игровой опыт и насмотренность. В работе ему также понадобятся – умение планировать и реализовывать стратегию, наличие отличного воображения и способность доносить свои мысли другим участникам рабочего процесса. Игровой программист Специфика игровых программистов не особо отличается от обычных. Но им необходимо глубже знать особенности игрового движка, уметь работать с соответственным стеком технологий и владеть языком С++, который чаще всего используется в геймдеве. Визуализаторы Художники, которые могут сделать неповторимый визуал – важная часть геймдев команды. Их работа не ограничивается прорисовкой пары моделей и отрисовкой сцены. Им необходимо иметь уникальное видение всего проекта, чтобы предоставить достойных персонажей, уместные детали и другие аспекты, соответствующие нынешним тенденциям. Тестировщики В должностные инструкции специалиста в сфере тестирования входит необходимость постоянно взламывать игру, чтобы проверить ее качество. Тестировщик проводит тесты на разных уровнях реализации жизненного цикла, ищет баги, проверяет игровую логику и делает все, чтобы как-то “сломать” игру. Для работы ему потребуются знания разных инструментов автоматизации, тестирования и создания документации. Звуковые инженеры, композиторы и актеры озвучивания Для придания игре определенной атмосферы и выполнения основной задачи – вовлечения игрока в процесс, используются различные варианты звукового сопровождения. Звуки боя, дрифта машины или природы вызывают определенный поток эмоций и выполняют психологическую задачу, делая игру более динамичной или релаксирующей. Также важно музыкальное сопровождения игры и качество озвучки. Для этого иногда используются известные композиции и озвучивание профессиональными актерами кино. Администраторы сервера Чтобы код работал необходим сервер, его правильная настройка и поддержка. Для выполнения этой задачи есть специалист – администратор сервера. Он должен знать сетевую инфраструктуру и понимать все особенности обслуживания сервера, чтобы не возникало никаких багов из-за повышенной нагрузки, которая чаще всего бывает на выходных. Комьюнити-менеджеры Игры, которые имеют популярность среди пользователей, быстро обрастают своими сообществами почитателей. В них требуется свой человек от команды, который будет взаимодействовать с аудиторией. Этим и занимаются комьюнити-менеджеры. Они изучают мнения игроков, а затем передают информацию коллегам, чтобы вовремя среагировать на возможные ошибки и негативные отзывы. Важно уметь общаться с людьми.
38;История появления паутины WWW;Еще в 60-х годах ХХ столетия появилась первая концепция объединения всех компьютеров в единой сети. Ее впервые описал ученый Джозеф Ликлайдер в 1962 году и дал ей название «Галактическая сеть». Джозефа по праву считают духовным отцом всемирной паутины. Несмотря на примитивность реализации, простой принцип обмена данными и кода, “Галактическая сеть” в виде идеи действительно очень похожа на принцип работы “современного” интернета. Но реализовать свой проект ученому удалось только после перехода в DARPA, где он занял главенствующее место в отделе IT. С этого момента концепт перешел на стадию активной разработки и стал называться ARPANET. Параллельно с Ликлайдером  в том же 1962 году задумался о создании сети и советский академик Александр Харкевич. Но его цель была не настолько глобальна, он хотел лишь организовать общегосударственную сеть, чтобы предприятия разного уровня могли обмениваться информацией. По мнению Александра это могло бы повысить эффективность работы, процесса управления и планирования в народном хозяйстве всего СССР. Также подобный проект разработал академик Виктор Глушков. Его руками была создана так называемая ОГАС – Общегосударственная автоматизированная система учета и обработки информации, но ее так и не приняли “наверху”. Откуда взялась WWW Сколько бы концепций, идей и проектов не выдвигалось, всемирная сеть, которую мы знаем сегодня, появилась на свет только в 1991 году. Так, физик и программист Тим Бернерс-Ли разработал WWW. Сегодня все говорят именно эту аббревиатуру. Мало кто знает, что она означает – World Wide Web. Всемирная паутина стала одним самых масштабных проектов в истории. В ней тесно перекликаются разные документы, изображения, видео и другой контент. Достаточно сделать всего один щелчок, и перед пользователем открывается новая информация, еще один, и он смотрит видео. Это ли не прекрасно?! Автор всемирной паутины Да, именно Тима Бернерса-Ли считают создателем сети. Британский ученый и исследователь CERN смог преуспеть и довести свою концепцию до полной реализации, в отличие от всех своих предшественников. Ему потребовалось 2 года безустанной работы, чтобы создать язык HTML, URL, HTTP и прочие каноны. После чего он презентовал это научному сообществу, которое поддержало идею Тима. Кто создал первый сайт? http://info.cern.ch – это первый сайт, который увидел мир в 1991 году. Его автором стал, как вы наверное догадались, сам Тим. Он посвятил его объяснению работы некоторых систем размещения и обмена информацией. История поисковиков Изначально для хранения ссылок применялись обычные файлы, а вместо поисковых систем использовался ручной режим. После появились каталоги для более удобного ранжирования ссылок, но внутри системы было сложно осуществить какой-либо поиск. Первое подобие поисковой системы появилось в 1990 году под названием Archie или «Арчи». Но он также был доступен только при скачивании. За то осуществление поиска нужной информации стало реальностью, хоть и без индексации. С подобным принципом работы также выпустили Jughead, Veronica и другие подобия поисковой системы. А в 1993 году появились сразу 2 системы поиска – поисковой робот WWW Wanderer и поисковой ресурс – Aliweb. Первый самостоятельно собирал URL сайтов и добавлял их в базу Wandex, а второй позволял собственникам сайтов вносить адрес в единую одноименную базу, чтобы каждый смог получить к ним доступ. Но для Aliweb было обязательным наличие у каждого сайта определенного индексного файла.
39;Правила создания резюме для программиста;Резюме – это возможность произвести первое впечатление, рассказать о себе, выгодно «продать» свои навыки и профессиональные качества. Считается, что самое главное указать в нем – опыт и образование. Именно поэтому компании получают одинаковые предложения от разных кандидатов, из которых невозможно выбрать по-настоящему достойного программиста. Необходимо правильно подойти к вопросу создания резюме, тогда появится шанс получить приглашение на собеседование и устроиться на работу в хорошую компанию. Мы решили помочь вам в этом нелегком деле. Три кита, на которых держится резюме Начните с основных правил хорошего резюме: Никогда не стоит врать в резюме. Приукрашивание реальности может сильно навредить. Когда на собеседовании, вы не сможете подтвердить качества, прописанные в резюме, велик шанс, что вас не только не возьмут на работу, но и могут распространить информацию о вашей лжи в другие компании. Также не стоит указывать, что в двадцатитрехлетнем возрасте у вас более 7 лет опыта, и вы уже освоили все языки программирования. Да, есть гении, но если это ложь – она не во благо. Только актуальные и уместные данные. Если вы претендуете на должность программиста – пишите об опыте работы программистом. Не стоит описывать как вы работали на баре или в Маке, это вряд ли поможет получить нужную должность, а может даже навредить. Об этом стоит рассказать уже на собеседовании, если спросят. Меньше слов. Только если вы претендуете на должность сеньора или хотите получать за час работы минимум 20 баксов – стоит расписывать все проекты, в которых вы участвовали и каждый профессиональный навык. Если нет, то стоит уложиться всего в 1-2 листа А4, иначе рекрутер отправит резюме в мусор. Придерживайтесь их и станете ближе к работе мечты. Правильная структура – залог успеха В резюме следует прописать: ФИО и контактная информация. Вроде и просто, но многие делают ошибки. Важно указать различные каналы связи: Skype, Email, номер телефона, LinkedIn, мессенджеры и пр. Опыт и достижения. Укажите свой путь развития по карьерной лестнице и достижения. Кратко и емко опишите технологии, которыми владеете и другие профессиональные качества, касающиеся только вакансии. Нетехнические навыки тоже важны, но не стоит писать про то, что вы активный и решительный, лучше описать те качества, которые помогут в работе – умею работать в команде, владею разными навыками тайм-менеджмента, умею организовывать свое рабочее пространство. Но и здесь стоит писать только правду. Образование. Теоретические знания, полученное образование, пройденные курсы и количество наград – это важно для устройства на работу, и без этого не составить хорошее резюме. Также укажите данные о пройденных языковых курсах, тренингах, повышении квалификации и пр. Дополнительные данные. К ним относится все, что не поместилось в вышеуказанные разделы. Например, то что вы готовы работать удаленно или в команде, можете переехать или отправиться в командировку, если это необходимо и пр. И еще немного правил Важно указать практические навыки. Распишите детально, кем вы работали, и что делали на своей должности. Не прописывайте лишь годы отработанные в компаниях и свои обязанности. Распишите, чего вы добились в работе, на какую должность устроились изначально, и как выросли, а также какие действия выполняли для успеха проектов. По возможности заручитесь рекомендательным письмом с предыдущего места работы или предложите оценить готовые продукты, в работе над которыми вы принимали участие (если есть пруфы, конечно).
40;5 лучших книг для изучения языка PHP;PHP это простой язык, на который вы можете потратить вовсе не много времени. В статье мы расскажем про 5 лучших книг, которые помогут вам освоить полностью язык PHP. В подборке есть варианты книг для программистов различного уровня знаний как для опытных, так и начинающих. Следует осознавать, что PHP является далеко не единственным языком. Начинать изучение программирования с него может быть достаточно сложным процессом. Дополнительно потребуется изучение других веб-технологий, так как HTML, JavaScript, PHP и CSS в большинстве проектов совмещаются. PHP, MySQL, JavaScript & HTML5 All-in-One For Dummies Автор: Steve Suehring Для начала изучения языка стоит обратить внимание на указанную книгу. Она выпущена популярным издательством O`Reilly, в книге есть ключи и базисы для изучения всей сферы веб-программирования. С помощью информации из издания можно начать создавать динамические сайты и отдельные страницы с привязкой к базе MySQL. Единственным недостатком является наличие неточностей и неработающих примеров. Их устранить не составит большого труда через Google. Изучаем PHP и MySQL Автор: Линн Бейли Данная книга может быть начальным пособием для программиста, но желательно обладать навыками взаимодействия с HTML. В книге присутствуют доступные и комментируемые примеры для последовательного изучения языка. Издание познакомит с простейшими алгоритмами работы и погрузит в продвинутый мир создания кода. Преимуществом является интересный дизайн, а визуальное оформление поможет разнообразить процесс и не заскучать при чтении книги. Learning PHP, MySQL, & JavaScript 4th Edition Автор: Robin Nixon Здесь рассмотрено буквально всё. Современная литература 3-его издания поможет как новичкам, так и программистам с некоторым опытом в сфере. Преимуществами являются лёгкость чтения, освещение самых важных понятий, особенности комбинирования информации и возможность изучения нескольких книг разработчика. Посложнее PHP Advanced and Object-Oriented Programming: Visual QuickPro Guide Автор: Larry Ullman В книге даётся развёрнутое представление об объектно-ориентированном программировании в PHP. Достоинствами являются лёгкий стиль письма и отзывчивость автора. При наличии вопросов или неясностей можно получить ответ на них лично от автора на его форуме. Скачать книгу PHP. Объекты, шаблоны и методики программирования Автор: Мэт Зандстра Если есть желание стать профессионалом, обязательно следует прочитать книгу. Она посвящает Junior PHP Developer в среду профессионального программирования. С помощью издания удастся изменить стиль написания. Может стать полезной для разработчиков по проектированию, здесь подробно описываются основные подходы. ООП после прочтения книги станет ясным и доступным благодаря наглядным и интересным примерам. Плюсом является описание работы с технологией командной разработки git. Бонус Предметно-ориентированное проектирование (DDD) Автор: Эрик Эванс Рекомендуем к прочтению программистам, которые работают с ООП. После изучения значительно расширяется понимание паттернов проектирования и структуры языка. Книга знакомит с малоизвестными и полезными представлениями по ООП. Примеры написаны на C языке, который легко воспринимать всем программистам. Для новичков совет – скорее переходите к созданию простого проекта, это может быть сайт-визитка или маленький представительский ресурс. Когда рука набита, а знания обильны и структурированы, не стоит забывать об официальной документации. А те кто не хотят изучать материалы по книгам, то рекомендуем наш видео курс по изучению языка PHP.
41;Решаем задачи, встречающиеся на собеседованиях;Разработчикам на собеседованиях часто задают математические и логические задачки. Они не имеют отношения к имеющемуся опыту специалиста и не указывают на его профессиональные качества. Тем не менее, они все же являются важной частью многих интервью. Даже опытные разработчики могут не справиться с хитро составленной задачкой. Сегодня мы разберем несколько из них, чтобы не только размять свой мозг, но и наверняка быть готовым ко встрече с рекрутером. Встреча Брат назначил сестре встречу ровно в 19.00. Но у обоих часы идут неверно. Так, у брата они спешат на 2 минуты, а он думает, что, наоборот, отстают на целых 3 минуты. У сестры же отстают на 3 минуты, но она уверена, что спешат на 2. Кому из них суждено прийти на встречу с опозданием? Решение: Так как у брата часы спешат, а он считает, что отстают, следовательно, он прибудет на встречу в 18.55, т.к. он будет торопиться прийти без опозданий. А вот сестра будет уверена, что у нее есть время в запасе, что приведет к ее опозданию на те же 5 минут. Килограмм курицы – это сколько? При измерении вдоль спины курица имеет длину от начала туловища до хвоста – 45 см, а при проведении замеров вдоль брюха – 53 см. В среднем ее высота составляет – 21 см, если измерять по боковой поверхности. Плотность на единицу боковой поверхности составляет +- 8 г/см2. Какой вес имеет килограмм курицы? Решение: В любом случае килограмм курицы будет иметь вес один килограмм. Чувствуете подвох? И это абсолютно привычная задача на собеседовании. Отмеряем литры Итак, есть два ведра. Они оба пусты, но одно имеет объем 5 литров, а второе – 3. Как можно отмерить 4 литра воды при их использовании? Решение: Набираем ведро вместительностью 5 литров водой и выливаем ее в трехлитровое. В большом останется 2 литра, которые следует перелить в ведро объемом 3 литра, предварительно опустошив его. Вновь наполняем пятилитровое водой доверху и с его помощью заполняем оставшийся свободный литр меньшего ведра. Итого – в ведре на 5 литров останутся необходимые 4 литра воды. Правильный порядок действий Еще одна задачка с подвохом – в условии необходимо осуществить деление 30 на ?, а затем прибавить 10. Вопрос: а какое число мы получим? Вы тоже начали делить 30 на 2 и приплюсовывать 10? Нет, 25 мы не получим. Правильный ответ 70, ведь если мы делим на дробь, ее следует перевернуть, а значит умножить 30 на 2. К полученным 60 останется прибавить 10.
42;4 книги, которые помогут понять математику;"И пусть для многих это не очевидный факт, но математика необходима абсолютно каждому программисту. Но понять ее непросто. Наверное, каждый помнит, как сложно было разобраться в алгебре и геометрии. Все сильно усложняется в старших классах – миллион и одна формула, теории и теоремы... Тем не менее, сегодня мы разберем 4 книги, которые откроют в вас мышление математика и без сложных оборотов, а тем более без формул. Каждая из них написана понятным языком для упрощения процесса изучения. Пойа Д. ""Как решать задачу"" Принципы решения задач преподносятся в виде психологического и педагогического анализа. Знаменитый математик добивается от читателей развития логического мышления. А благодаря использованию основ эвристического мышления, у него это успешно получается. Собственную методику обучения Пойа разрабатывал более 20-ти лет. Эта книга наполнена не только теорией, но и практическими советами, подкрепленными наводящими вопросами, которые помогут вам еще быстрее окунуться в мир математики. Пойа Д. ""Математика и правдоподобные рассуждения"" Как создаются математические гипотезы и выстраиваются новые факты? Интересно, не правда ли?! Прекрасная подача информации, дополненная иллюстрациями, понравится каждому, кто захочет понять для себя математику. Вы также узнаете, как правильно относиться к новым приходящим веяниям. Материал изложен в 2 разделах, несвязанных друг с другом. В первом излагается про полную индукцию, Декарта и другие темы, связанные с аналогией в математике. После каждой главы вас ожидают задачи и множество практических примеров. Во втором автор предлагает разобраться в силлогизме и четко разделяет истину и ложь. Все это дополняется азами теории вероятности. Пойа Д. ""Математическое открытие"" Как решать математические задачи? Пожалуй главный вопрос, который стоит перед человеком, напрямую или косвенно связанным с математикой. Книга полномерно ответит на этот вопрос и объяснит, что делать с задачами разного типа. Прямые методические рекомендации, примеры и анализ решений – все это гармонично хранит учебное пособие. Барбара Оакли ""Думай как математик"" Этот учебник, который посредствам тесного переплетения с математикой, даст отличную основу для развития логического мышления, тренировки памяти и выбора дополнительных способов обучения. Он поможет понять, как решаются сложные задачи не только в математике, но и в жизни, а также объяснит, как фиксировать огромный поток информации. Оакли придала большое значение созданию этой книги. Она использовала в ней исследования о когнитивных способностях человека и материалы, оставшиеся после общения с ведущими психологами, нейробиологами и преподавателями."
43;Книги для начинающих разработчиков Python: ТОП-8;Многие считают, что в современных профессиях нет места книгам. Все знания берутся из готовых туториалов, видео, инфографик, подкастов и сокращенных текстов. На самом деле это не так. Именно книги являются наиболее важным и ценным носителем информации для специалистов IT-профессий. Чаще всего в них уже все разложено по полочкам, и не требуется искать ответы на свои вопросы по всей сети Интернет. Мы собрали список из ТОП-8 самых достойных книг по программированию для изучения одного из самых популярных языков программирования Python. Они ориентированы для начинающих специалистов и тех, кто только начинает свой путь в профессии. Пол Бэрри: Изучаем программирование на Python Здоровый талмуд знаний был создан специально для новичков в мире программирования на Python. На более чем 600 страницах изложено все необходимое для понимания устройства языка в легком не академическом формате. Не стоит бояться такого объема – важно то, что вы получите необходимые знания и навыки, при этом вам не надоест читать книгу. Каждая страница наполнена интересным легкочитаемым материалом с множеством практических примеров, забавных мемов и наглядных иллюстраций. Но не стоит путать его со справочников, материала действительно много, но он позволит лишь разобраться во многих вопросах языка и освоить его на среднем уровне. Автор создал не сухой и бесчувственный экскурс во вселенную Python. Каждая глава выверена, структурирована и понятна даже тем, кто не знает сути этого языка. Единственное условие – для понимания всего и вся, вы уже должны уметь работать на других языка программирования. По окончании прочтения вы научитесь создавать собственные сайты, обрабатывать и управлять базами данных, использовать декораторы, менеджеры и пр. Алексей Васильев: Программирование на Python в примерах и задачах Языки программирования – это в первую очередь практика. На теории далеко не уедешь, даже если все будет понятно и ясно. Васильев предоставляет отличную возможность потренироваться, проверить и усвоить новые знания. Книга просто необходима тем, кто ознакомился с основами языка. Она наполнена базовыми методами, основными подходами и конструкциями, которые следует узнать со всех сторон именно в практических условиях. На первых страницах разбираются простые темы, затем становится все сложнее. Кроме того, демонстрируются решения одних и тех же задач разными методами. Марк Лутц: Изучаем Python. Том 1. 5-е изд Известный во всем мире инструктор по Python создал по-настоящему стоящий учебник, наполненный всем необходимым об этом языке. Для многих разработчиков она стала настольной книгой, в которой в любой момент можно найти ответы на интересующие вопросы. В ней в равной степени предоставляются как теоретические знания, так и практические навыки. В книгах нет воды, все расписано по делу, а каждый раздел дополнен домашним заданием для закрепления материала. Аллен Б. Дауни: Основы Python. Научитесь думать как программист Это книга, которая даст не только технические навыки, но и поможет начать мыслить как разработчик. Несмотря на небольшой объем учебника, он наполнен достаточно большим количеством полезного материала, который поможет как начинающим программистам, так и ребятам, не имеющим никаких знаний. В нем есть место для примеров и задач, которые подаются по принципу от простого к сложному. Тем, кто откроет книгу, не требуется иметь глубокие математические знания. Основная ее задача – обучить всех желающих базовым принципам и азам программирования. Мэтт Харрисон: Как устроен Python. Гид для разработчиков, программистов и интересующихся Это настоящий гид в мир программирования Python. Автор действительно дает пошаговую инструкцию для начинающих программистов по всем азам языка, демонстрируя его особенности и возможности. Путь проложен через понятия, описанные простым языком, а дополняют их практические задания для закрепления материала. Андрей Корягин: Python. Великое программирование в Minecraft Наглядный и простой учебник дает понимание принципов Python в наглядном представлении на примере Minecraft. Это действительно легкий и интересный путь ознакомления с языком программирования. В нем описаны основы математической логики и проектирования простых и сложных конструкций. Вы сразу будете видеть окончательный результат, что сделает обучение еще более привлекательным. Учебник даст несколько вариантов для решения каждой задачи. Эдуард Шакирьянов: Компьютерное зрение на Python. Первые шаги Отличная книга для людей, которые вообще не знакомы с Python. Она наполнена понятными иллюстрациями и примерами, дополненными объемными и понятными объяснениями. Весь материал направлен на ознакомление с основными аспектами языка, после их изучения удастся создать собственный маленький проект. Книга ориентирована не просто на начинающих программистов, но и на школьников, поэтому написана на понятном человеческом языке. Описана также библиотека OpenCV и расписано множество вариантов кода. Марк Лутц: Python. Карманный справочник Любому программисту Python будет полезно иметь подобный справочник, который включает много полезного материала для работы. Вам в любой момент удастся подсмотреть ответ на свой вопрос. Он действительно имеет карманный вид, а все темы расписаны в удобном формате. Существует уже несколько изданий, каждое из которых дополняется информацией по новым тенденциям. Справочник наполнен информацией о функциях, методах, библиотеках и их модулях, исключениях и пр. Он станет прекрасным дополнением для учебников одного из лучших инструкторов Python Марка Лутца “Изучаем Python”. Пополните свою библиотеку полезными книгами и откройте для себя мир Python лучшим образом!
44;Python или Go: какой язык лучше применять в ИИ и науке о данных?;История Python началась в конце 1980-х, но признание айтишников он завоевал всего лет 10 назад. С тех пор язык растет колоссальными темпами, и в 2019 году ему удалось достичь второго места по популярности. Python стал главным инструментом программистов, которые занимаются Data Science, AI и Machine Learning. И в ближайшем будущем он вряд ли перестанет доминировать в этих сферах. Тем не менее, позиция Python может пошатнуться из-за некоторых его недостатков, особенно выделяющихся на фоне новых перспективных языков. Но что бы ни ждало нас впереди, сейчас лучшее время для того, чтобы разобраться в проблемах Python и попробовать отыскать ему альтернативу. Тем более что кандидат уже есть – Golang. Секрет популярности Python В основе популярности Python в первую очередь лежит простота освоения. У него более легкий синтаксис, чем у других ЯП, поэтому овладеть базовыми знаниями Python можно за пару дней или даже часов. Так как в стандартной библиотеке этого языка есть почти все необходимое, разработчики чаще всего возвращаются к нему и после изучения других языков вроде C++ и Java. Таким образом, Python – это идеальный вариант для начинающих, ведь разработка на нем продуктивная и при этом максимально простая. Недостатки Python Низкая скорость Интерпретируемый характер языка является причиной его самого главного минуса — медленного выполнения. По сравнению с остальными, компилируемыми языками, например, C++ и Golang, здесь выполнение происходит слишком медленно. Снижает скорость выполнения и то, что Python относится к динамически типизированным ЯП, т.е. тип данных в нем присваивается всем переменным автоматически в процессе выполнения, тем самым замедляя его. Применение C или C++ Чтобы решить эту проблему, разработчикам приходится дополнительно использовать другие языки. Для повышения скорости чаще всего используют библиотеки вроде Tensorflow и Numpy, частично написанные на C/C++. Отсутствие многопоточности Global Interpreter Lock дает возможность выполнять лишь 1 поток одновременно, тем самым улучшая производительность. Т.е. в Python на самом деле нет настоящей многопоточности. Примечание: GIL присутствует только в версии CPython, в Jython глобальной блокировки интерпретатора нет, как и в IronPython. Почему именно Go? Golang — это ЯП общего назначения с открытым исходным кодом, предназначенный для создания простого, надёжного, качественного и эффективного ПО. Он был разработан в Google в ноябре 2009 года. Скорость Так как Go — это компилируемый язык со статической типизацией, выполнение в нем происходит в разы быстрее. И для этого ему не приходится заручаться помощью других языков, как в случае с Python. Здесь вы можете познакомиться со сравнением Golang и Python по результатам тестирования производительности софта. Обратите внимание, что по скорости Go недалеко ушел от Java, да и C++ он уступает не сильно. А еще Go нужно гораздо меньше времени для компиляции кода. Простота в освоении Синтаксис Go несложный и похожий на C. Поэтому его можно легко выучить, особенно если вы уже владеете основами C/Java. Начинающим советуем, прежде всего, посмотреть интерактивный тур-экскурсию A Tour of Go. Также по ссылке вы можете ознакомиться с официальной документацией языка. Рост популярности Hackearth провел опрос больше 16 тысяч разработчиков из 76-и стран мира, и Go оказался наиболее востребованным ЯП в 2020 году. Его хотят изучить 32% квалифицированных разработчиков и почти 30% начинающих/студентов, что вполне ожидаемо. Параллельное выполнение Вот мы и подобрались к одной из наиболее сильных сторон языка Go. Параллельное выполнение в нем обеспечивается горутинами – функциями, способными работать одновременно. Горутины просто запускаются и очень легковесны (им нужно лишь пару килобайт памяти), поэтому параллельно могут выполняться хоть 1000 горутин. Почему Go отлично подходит для разработчиков в сфере ИИ? Несмотря на то, что Go не обладает особенными преимуществами для исследователей искусственного интеллекта и Data Science, этим специалистам все равно нужно начинать использовать именно его. Почему? Сейчас объясним, но сначала вернемся к Python. Python был создан 3 десятка лет назад, и не для того, чтобы писать на нем алгоритмы Machine и Deep Learning или визуализировать данные. Сейчас Python используют с этой целью лишь потому, что разработчики так привыкли изначально, ведь это простой язык, дающий им возможность создавать те программы, которые они хотят создавать. Но Go способен существенно повысить продуктивность программистов. Как мы уже выяснили, у него есть ряд преимуществ перед Python, и благодаря им он в ближайшем будущем легко может обойти конкурента по популярности. Таким образом, для исследований AI и Data Science следует применять именно Go: он позволит разработчикам воплощать свои идеи в жизнь намного лучше, чем если они будут использовать любой другой ЯП.
45;В чем секрет языка Go?;Вы знали, что заработок Golang-разработчиков выше, чем у других? И что в будущем многие проекты будут реализовываться именно на нем? Сейчас мы выясним почему Golang стал таким востребованным! История Мы обязательно расскажем вам обо всех тонкостях языка. Но сначала давайте поговорим о том, как он появился на свет и стал новым феноменом IT-сообщества. В 2007 году был разработан очередной язык программирования с открытым исходным кодом – Golang. Его выпуск состоялся в 2009-ом. Создатели Go стремились преодолеть сложность и закостенелость популярных серверных языков Java, C и C++. Также на концепцию современного языка Back-end`a их натолкнуло массовое распространение многопроцессорных вычислений. В итоге команда поставила перед собой задачу создать такую среду, которая смогла бы эффективно применять многопроцессорность и проводить сложные облачные вычисления. Нельзя не упомянуть, что Golang – это продукт Google, и его поддержка сейчас осуществляется разработчиками этой огромной успешной компании. Так что в ближайшем будущем языку точно ничего не грозит. К тому же его используют такие гиганты как BBC, YouTube, Docker, Dropbox и Soundcloud. Что в нем такого? Golang – это высокоскоростной компилируемый язык бэкенда. Он позволяет компаниям существенно экономить время и средства на всех этапах сборки приложений (даже несмотря на огромную зарплату, которую платят разработчикам Go). Golang имеет обширную и быстро обновляемую документацию. Некоторые утверждают, что в специфике Go можно разобраться за одни сутки. И это очень близко к правде, поскольку кривая изучения базовых знаний действительно более щадящая по сравнению с Python, Java или Javascript. Язык довольно ограниченный (для кого-то это плюс, для кого-то – минус). Тестовый фреймворк встроен только один. Решать проблемы и делать сборку приложений можно лишь несколькими путями. Нам такой расклад кажется удачным, потому что есть практически полноценное руководство, полезное для каждого пользователя. С его помощью детальный план действий для сборки любых приложений можно составить легко и быстро. Ограничения наблюдаются и в структурах данных (за исключением slice и map). Но это неплохо, ведь лимиты способствуют креативности. Оценивая с данной стороны Golang, вспомните, например, Ruby, где огромное число методов, разнообразных способов достижения одних целей и решения одинаковых задач пугают и путают других людей, впоследствии читающих написанный код. Важное преимущество языка Go – параллелизм. Об этом говорят все. По сути, параллелизм заключается в разбиении приложения на небольшие программы, запуск которых происходит одновременно. Простыми словами, Golang способен запускать сотни мини-программ в пределах одной крупной программы, действуя при этом с впечатляющей скоростью. И наконец, диапазон зарплат (самое приятное мы оставили на десерт). Одного взгляда на представленный  график должно хватить, чтобы понять, что разработчики Go получают за свой труд хорошие деньги. В 2019 году минимальная сумма равнялась 40 тыс. долларов, тогда как средняя зарплата специалиста с трехлетним опытом не превышала 70 тыс. долларов.
46;Необходимые знания для получения должности разработчик Java;Сегодня даже джунам по Java выдвигают огромный список требований, основным из которых является опыт работы. Но где же его приобрести? Важно, что отсутствие опыта можно компенсировать. Код Пожалуй самое очевидное, в чем вы должны разбираться как специалист – это код. Важно то, как происходит изучение тонкостей кодирования. Многие начинающие разработчики ограничиваются интернет-ресурсами. Их сейчас предостаточно, от привычных обучающих по типу JavaRush до профессиональных по типу Habr. В них есть огромная польза, т.к. здесь рассматриваются интересные лайфхаки по работе с Java, объясняются отдельные темы и публикуется огромный поток полезной информации. Но не стоит забывать об обычных учебниках. С ними реально получить более глубокие фундаментальные знания. И не стоит полагать, что все книги написаны на непонятном языке. Сегодня доступно много вариантов литературы, где каждое слово доходчиво объясняется на пальцах. Например, серия для новичков Head First – “Паттерны проектирования”, “Изучаем Java” и пр. – пропитана практическими примерами и полезными задачами, что позволит зафиксировать новые знания после каждой темы. Затем стоит двигаться дальше и переходить к более серьезной литературе. Например, книга “Spring в действии” под авторством Крейга Уэллса познакомит вас с этим фреймворком, но не с новой версией 5, а с 3. Но в ней достаточно много полезной информации, чтобы после завершения осталось лишь прочитать документацию к новым версиям Spring. В книге вы узнаете обо всех тонкостях функционала, откроете практические гайды на русском и английском языках и разберетесь с кейсами. Базы данных Наравне с кодированием идет понимание баз данных. Да, сначала будет просто, достаточно подключить базу данных, а далее все расскажет шаблон. Но, их существует несколько видов и каждая ориентирована под разные проекты и потребности. Знать эти особенности крайне важно для успешного результата собеседования и работы в целом. Для рабочих процессов потребуется понять принципы акронима ACID (Atomicity, Consistency, Isolation, Durability). После ознакомления с последним будет проще найти оптимальную базу данных, полагаясь на все эти критерии. Бренчирование и контроль версий Для работы каждая компания использует определенный хостинг для контроля и управления версиями. Чаще всего это GitHub. Он самый популярный и позволяет работать с огромным количеством информации. Для работы над корпоративными проектами также используют Bitbucket или GitLab. Первый является отличным аналогом GitHub, но дополнительно имеет приватные репозитории, доступные бесплатно и в большом объеме. А GitLab снабжен дополнительным функционалом, который взаимосвязан с CI/CD-пайплайнам. Методология CI/CD Одной из методологий DevOps является CI/CD. Она также именуется, как непрерывная интеграция. Ее используют для быстрой доставки новых элементов в разрабатываемый проект после предварительного проведения автоматизированного тестирования. Идеально подойдет компаниям, которые используют для работы быструю разработку и сразу отправляют продукт заказчику. Soft Skills Нетехнические навыки также важны для работы, как и знание фреймворков, кодирования и баз данных. Так, если два кандидата, которые претендуют на одну должность, имеют одинаковый список компетенций, компания будет рассматривать именно мягкие навыки. Например, стрессоустойчивость, умение работать в команде, дисциплинированность, навыки тайм-менеджмента, способность генерировать новые идеи и тяга к постоянному изучению новых возможностей. Заключение Да, с перечисленными скиллами уже можно уверенно идти на собеседование и рассчитывать на снисхождение руководства. Но не ограничивайтесь ими, изучайте больше и тогда получить работу мечты будет гораздо проще. Также хотим отметить, что на нашем сайте есть большая программа обучения по теме Джава разработки. В ходе программы вы получите все необходимые знания для становления разработчиком в этой сфере. Ознакомится с программой обучения по можно по этой ссылке. В ходе программы обучения вы изучите более сложные концепции языка, научитесь работать с базой данных, выполнять тестирование проекта, работать с технологией Git и многое другое. За курс вы научитесь с нуля создавать приложения на ПК, строить веб сайты разной сложности и главное научитесь создавать полноценные Андроид приложения на основе Java и Android Studio.
47;Библиотека AR.js / Дополненная реальность в браузере;Дополненная реальность - это целый тренд. В статье мы рассмотрим работу с библиотекой AR.js, которая позволяет буквально за несколько строк кода добавить дополненную реальность. Современным разработчикам все труднее и труднее найти крутые и интересные решения, которые бы заставили клиента оставаться на сайте как можно дольше. В качестве уловок на сайтах делают крутую анимацию, добавляют различные 3D объекты, создают практически целые мультики из сайта, а также реализуют полноценную дополненную реальность, при чём такую, что для её использования понадобиться лишь компьютером с вебкой или же телефон с камерой. Посмотреть подборку крутых сайтов с оригинальным дизайном можно в нашей статье по этой ссылке. Разработка приложения Для создания программы на основе Ar JS необходимо лишь создать HTML файл и подключить в него соотвествующие библиотеки. Все описание AR объектов располагается в так званом A-Frame. Внутри него можно указать маркер (картинка, на которой будут показаны объекты), используемую камеру, а также виртуальный объект. Объект обязательно должен быть в формате GLTF (Graphics Library Transmission Format). Найти такие объекты можно на сайте SketchFab. Зайдите на сайт, зарегистрируйтесь, найдите бесплатную модель и скачайте одну из них. Распакуйте скачанный файл и пропишите полный путь к файлу scene. Теперь можно тестировать и для этого нужен сервер, при чём подойдет даже локальный сервер. Если же тестировать через простое открытие файла в браузере, то скорее всего ничего не заработает. Плюс, будет хорошо, если в будущем ваш проект будет находится на сайте что использует защищенный протокол https, иначе доступ к камере будет блокироваться.
48;Игры на Linux: какие есть и стоит ли заниматься их разработкой?;"Разработка игр на Linux - сложная и не благодарная затея. Верно ли это утверждение? В статье мы постараемся разобраться стоит ли заниматься играми под Linux и какие игры уже есть. Наше знакомство с Linux состоялось лет 7 назад. Впечатление о системе сложилось хорошее, но по итогу все равно вернулись к Windows, потому что запускать игры на Linux не было возможности. Конечно, по правде говоря, это не совсем так, ведь существовала Wine и прочие специальные программы, позволяющие использовать продукты для Windows на Linux, но в те времена это было чересчур сложно. Согласитесь, намного легче просто кликнуть по ярлыку и сразу приступить к игре, чем заморачиваться с совместимостью, драйверами и пр. Какие существуют игры на Linux? Ответ простой: самые разные! Сейчас многие разработчики стараются выпускать игры одновременно для разных ОС (и Windows, и Linux). Это правило особенно соблюдается создателями инди-игр, которые делают все для расширения аудитории. Маленьким студиям не затруднительно представить свой продукт сразу на разных операционных системах. А крупные для портирования игр прибегают к услугам специализированных компаний, таких как Feral Interactive. Так что пользователи Linux сейчас могут спокойно поиграть в: Life is Strange (все части); Hitman; Counter Strike; Tomb Raider (только вышедшие с 13-го года); Deus Ex (только Mankind Divided); Metro Last Light; Thief и еще много других. Стоит ожидать, что со временем будут адаптированы и другие популярные тайтлы. В качестве примера можно привести хотя бы Metro 2033, которую сперва выпустили только для ОС Windows, а доработанную и улучшенную версию Redux мы увидели уже и на Linux. Вот ориентировочные данные о числе портированных игр по состоянию на апрель 2020-го: Картина не самая радужная, ведь для того же Mac OS X на сервисе Steam представлено 11 тысяч игр. Тем не менее, в данный момент продолжается разработка разных инструментов, которые могли бы повысить количество запускающихся на Linux продуктов. Как запустить игры для Windows на ОС Linux? Помимо Wine существует и несколько других способов. Так, программное обеспечение Lutris расширяет список доступных игр еще на 3 тысячи. Но лучшим в этом плане пока остается Proton. Этот инструмент совместимости позволяет запускать из Steam ещё 7 тысяч игр. Его выгодное отличие от Wine, Lutris и др. заключается в том, что пользователю не приходится совершать никаких дополнительных действий: нужно просто активировать использование Proton в настройках сервиса Steam и скачать понравившуюся игру. Все, она работает! Очень редко проблемы все-таки могут возникнуть, но только со старыми играми. Настройки в Steam Play На созданном энтузиастами сайте ProtonDB вы можете посмотреть перечень поддерживаемых игр, рекомендуемые настройки и лучшую версию инструмента для каждой конкретной игры. С момента выпуска в 2018-ом году Proton регулярно обновляется. Поэтому можно предположить, что скоро на Linux будут доступны все те же игры, что и на Windows. Единственное, что омрачает сложившуюся картину, - онлайн-игры. Возможно, вы что-то слышали о том, как однажды были массово забанены игроки популярного шутера Battlefield V из-за того, что игра приняла библиотеку DXVK (подробнее о ней расскажем дальше) за читерскую программу. Проблемы бывают и с VR-шлемами, так как их разработчики далеко не всегда и не сразу предусматривают поддержку Linux. Почему игр для Linux так мало? Хотя абсолютное большинство техники работает на Unix-системах, нишу для ПК надежно заняла Windows. Даже несмотря на падение ее доли с 95% в 2009-ом до 77% в 2020-ом, компьютерные игры продолжают выпускать в основном только на Windows. Из-за высокой популярности Windows, продукты для разработки игр всегда создавались исключительно под эту ОС, так же как и инструменты для их запуска. Вот яркий пример: всем известная DirectX ни одной другой системой не поддерживается. Долгое время существовал лишь один ее аналог – OpenGL, но в плане производительности с DirectX он не мог сравниться. Сейчас уже есть улучшенный вариант OpenGL – Vulkan, и он достаточно близко подобрался к лидеру. Если в игре предусмотрена поддержка этой библиотеки, ее становится намного легче портировать на ОС Linux. Также есть всевозможные обёртки (к примеру DXVK) — это библиотеки, позволяющие запускать DirectX через Vulkan. Нельзя не упомянуть, что трудности могут появиться и из-за индивидуальных особенностей игры, как в случае с «Космическими Рейнджерами 2». По факту эта игра состоит из двух, что снижает нагрузку на ПК, но при этом мешает портированию и запуску на остальных ОС. Стоит ли заниматься разработкой игр для Linux? Если раньше разработчики были вынуждены напрямую применять графические библиотеки, сейчас эта работа возлагается на движок. Так что вам остается только зайти в настройки и выбрать необходимую библиотеку. Таким образом, вы можете с помощью DirectX сделать Windows-игру, а затем просто с помощью Vulkan скомпилировать её в Linux. Чаще всего этот процесс укладывается в несколько кликов, но иногда все-таки требуется сделать правки в коде. Окно с выбором платформы в настройках Unity Чтобы портировать игры на другие ОС, нужно совсем незначительно повысить вложения средств в разработку. Зато в результате вы существенно расширите свою аудиторию. Что касается создания игр только для Linux, нам это кажется плохой идеей, так как этой системой пользуется слишком мало геймеров, что делает такую затею просто невыгодной. А так как Vulkan сейчас поддерживается практически во всех востребованных движках, фанаты Linux могут не бояться: без развлечений они точно не останутся."
49;5 лучших систем управления базами данных;"СУБД – система управления базами данных – это комплекс, состоящий из ПО и средств лингвистического назначения, применяющийся для создания баз данных и проведения с ними манипуляций. Основная задача систем – управление данными, размещенными в операционной и внешней памяти. Кроме того, с помощью СУБД можно восстанавливать и копировать фрагменты информации из базы, даже после сбоя. Предлагаем ознакомиться с 5 лучшими СУБД. MySQL MySQL – это самая часто используемая СУБД. Ее выбирают такие крупные компании как: LinkedIn, Wikipedia, Twitter, Alibaba, Facebook и пр. Основные особенности системы – основана на модели клиент-сервер и имеет открытый исходный код. Предназначена для взаимодействия с базами данных, организованными на реляционной модели. Преимущества: высокая скорость работы и производительность; подходит для небольших и маленьких проектов; за один раз можно привязать большой поток данных; большое количество таблиц на выбор, которое постоянно увеличивается; можно заменить исходный код в зависимости от потребностей проекта; удобство и простота пользования; одновременное открытие доступа неограниченному количеству пользователей; высокий уровень безопасности баз данных. MySQL постоянно совершенствуется и развивается. Она идеально подходит для проектов, которые ведутся в таблицах. Из-за небольшого количества доступных функций, с системой проще взаимодействовать. Разобраться в работе с этой СУБД сможет даже новичок. Управлять базой данных можно без использования программ, для этого достаточно открыть браузер. Доступны всего два режима работы: графический и текстовый. Для их переключения достаточно воспользоваться приложением phpmyAdmin. Чтобы взаимодействовать с ним знания SQL-команд не требуются. PostgreSQL PostgreSQL – это система предусмотрена для взаимодействия с базами данных, основанными на объектно-реляционной модели. Многие используют ее в качестве бэкенда для приложений. Основана система на языке структурированных запросов SQL. Она постоянно совершенствуется, что позволяет ей оставаться в топе уже несколько лет. Ее используют такие гиганты как: Apple, Fujitsu Juniper Network и другие. Преимущества: отсутствие ограничений на размер базы данных; можно добавлять любое количество информации в таблицы; имеет открытый исходный код; в официальных документах прописаны все возможности системы; многозадачность и высокая производительность; обширный функционал; работает на всех операционных системах; подходит для новичков; интегрируется с любым языком программирования. Для хранения в PostgreSQL можно использовать не только текст,  но и аудио, изображения, видео и графические данные. SQLite SQLite – это однофайловая СУБД, основанная на языке программирования С. Она легко встраивается, т.к. не имеет сервера. База данных, основанная на реляционной модели, будет хранится на одном устройстве. Даже если их будет несколько, они легко поместятся в одном файле и не потратят много места. Для работы с системой не нужны дополнительные приложения. Она функционирует даже на мобильных устройствах, камерах, приставках и пр. Преимущества: любое количество данных хранится в одном файле; высокая скорость работы; минимальное количество функций с возможностью их расширения посредствам дополнительных приложений; не требуется длительная и сложная настройка перед работой; быстрый обмен данными; даже со всеми настройками пустая система весит до 400 Кб. К сожалению, SQLite не позволяет увеличивать производительность, но это не мешает ей прекрасно справляться с информационными базами данных. Oracle Oracle – это первая успешная реляционная СУБД, которая в 2007 году занимала 47% всего мирового рынка. На сегодняшний день она все также сохраняет свою популярность. Благодаря встроенной технологии RAC, в системе можно объединять серверы, что превращает несколько баз данных в одну большую. Преимущества: высокий уровень безопасности данных; быстрое восстановление системы после сбоев; масштабируемость; высокая производительность и скорость обработки; поддержка баз данных любого объема; систему можно легко переносить на другую операционную систему; возможность получения кластерного доступа к базе данных; Из-за высокого ценника Oracle могут позволить себе только крупные компании. MongoDB MongoDB – это простая в установке СУБД, основанная на С++ и имеющая открытый исходный код. Предусмотрена система для хранения нереляционных баз данных, а именно документов, не имеющих графических схем и таблиц. Ее используют Facebook, New York Times, IBM и пр. Преимущества: горизонтальная масштабируемость; высокая скорость работы; имеется идентификатор; документоориентирвоанное хранение данных; хранение данных в формате коллекции; минимум функций; все данные хранятся в узлах кластера, что исключает общую точку отказа. Ввиду применения в MongoDB объектного языка запросов, приложения могут иметь разную производительность."
50;Как работает искусственный интеллект в играх?;"Для придания чувства реальности в игры помещают разного рода ИИ. Порой можно подумать, что он превосходит даже людей. В статье мы расскажем как работает ИИ в играх. Все IT-сферы сделали огромный скачок в развитии, та же самая тенденция наблюдается и в игровой индустрии. Вначале создания были простейшие игры наподобие Pac-Man и Pong, и даже они позволили забыть игрокам о реальности на недели. Современные проекты по созданию игр уже стали полноценным хобби, настолько распространённым, что сегодня каждый четвёртый житель играет в World of Warcraft, World of Tanks, Call of Duty и т. п. Для многих остаётся загадкой, какую роль в развитии игр имеет искусственный интеллект. Сегодня постараемся понять, за что он отвечает именно в играх. Что такое ИИ в играх? Чтобы было всем понятно, искусственный интеллект отвечает за модуляцию или имитацию естественного поведения игроков или отдельных объектов. В играх их называют ботами. Принцип сводится к имитации поведения, объектами управляет не человек. Иначе говоря, ИИ является искусственной заменой человеческого интеллекта. В некоторых играх используется простейший ИИ, включающий лишь небольшой набор правил. Нередко ИИ является сложным алгоритмом действий, который отвечает за работу целой команды или армии противников Есть ли отличая ИИ в играх от обычного? В традиционном представлении ИИ, его основная цель -  создание полноценного интеллекта, но искусственными средствами. Такой ИИ может самостоятельно обучаться, давать ответы на вопросы, в общем – он развивается без программирования алгоритмов со стороны человека. Сегодня уже делаются попытки создания полноценного ИИ, одним из перспективных проектов является Kismet, проводящийся в Массачусетском технологическом институте. ИИ должен уметь подстроиться к социальным, физическим и эмоциональным составляющим. В сфере игровой индустрии ИИ имеет практичную роль, а не развлекательную. Игры не представляют высоких требований к мощности ИИ и дополнительным свойствам. Здесь не требуется наличие эмоциональности, самосознания, самостоятельной обучаемости. Всё необходимое находится в пределах одной системы, поэтому круг знаний сужается. Главная задача ИИ состоит в правдоподобной и убедительной имитации поведения игроков. Назначение ИИ в игровой индустрии ИИ может выполнять всевозможные задачи: от обработки общего набора правил, отвечающих за поведение базовых объектов, до управления персонажами. К работе ИИ принято относить представление заранее описанных событий. Иллюстрация: в игре в игре F.E.A.R девочка-призрак, которая наводит ужас на игроков – это заблаговременно написанный сценарий. Говоря об ИИ, в голову у большинства игроков сразу приходят мысли о ботах, управляемых компьютером. Все перечисленные роли исполняет один единственный актёр – ИИ. Что нужно для ИИ в играх Требовательность к системным ресурсам напрямую зависит от предназначения и требований, предъявляемых к ИИ. Чем сложнее разработана система, тем большее количество ресурсов тратится на обработку ИИ. На простейшем уровне для понимания – потребуется мощность и время работы процессора для расчёта следующих действий в мире. В сложных играх потребуются различные средства, способствующие анализу окружающей среды ИИ, фиксации пользовательских действий и оценки предыдущих достижений. Простейший пример ИИ Самая простая форма ИИ – это система, построенная на наборе правил. Можно даже поспорить, является ли данная система ИИ. В любом случае она далека от традиционного представления об искусственном интеллекте. Поведение игровых объектов происходит за счёт уже установленных алгоритмов, учитывающими определённые факторы игры. Из-за разнообразных действий может отличаться конечный результат. Подобную систему нельзя назвать интеллектуальной. Самым известным приложением, работающим по аналогичной системе, является Pac-Man. За игроком гонятся 4 приведения, каждое действует на основании заложенного простейшего набора правил. Одно из них постоянно поворачивает влево, второе всегда идёт вправо, третье может поворачиваться в любую сторону, а четвертое преследует игрока. Если разделить приведения, их алгоритм действий легко определить и предугадывать. Пользователю оказалось бы слишком просто спасаться от приведений. Конечные автоматы Подразумевается машина, имеющая конечное количество состояний. Она является методом проработки и преобразования состояния отдельных объектов или их групп. Используется в отношении объектов, которые изменяются в зависимости от определённых условий. Для представления каждого состояния могут использоваться физические условия: одежда, погода, эмоциональное состояние и т. п. Есть несколько простых способов реализовать конечный автомат при использовании системы объектов: способ 1. Представить все состояния в качестве переменных, которые легко проверить в функции. Преимущественно проверка реализуется при помощи громоздких конструкций переключения; способ 2. Применить указатели функций – это основа игр на языке C. В объектно-ориентированных языках, наподобие C++ используется понятие виртуальная функция. Адаптивный ИИ В многочисленных современных играх необходимы сильные противник, действия которых сложно или невозможно предсказать. Динамическое поведение и адаптация к текущим условиям требует использование полноценного ИИ. Подстраиваемый ИИ преимущественно используется в стратегиях и шутерах, имеющих сложную механику игры и многочисленное разнообразие вооружения, и бесчисленное количество возможностей. Такой искусственный интеллект применяется в играх, которые необходимо сделать сложными и непредсказуемыми. Если заменить его набором алгоритмов, игрок за какое-то время определит оптимальную стратегию, обеспечивающую победу. В ИИ системе регистрируется выбор, осуществлённый игроком в ходе переломных событий. Все переменные (решения) должны оцениваться и на их основании строится будущее поведение. Проиллюстрировать ситуацию помогут: состояние здоровья, количество времени, наличие преимуществ и т. д. в боевых играх. При нанесении урона противнику учитывается: показатель защиты, наличие одежды, урон от оружия, дополнительные бонусы. В играх, построенных на тактике, ИИ может учитывать способы победы игрока в предыдущих играх и изменять поведение, переходя от нападения в оборону или наоборот. ИИ может «экономно» вести бои с минимальными потерями, выбирать сбалансированную трату войска на победу или идти в наступление не учитывая потери. В играх, где игроку предоставляется помощник, ИИ обеспечивает приспособление персонажа к стилю игры игрока."
